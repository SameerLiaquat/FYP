[{"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\index.js":"1","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\App.js":"2","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\LandingPage.js":"3","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\HadithQueryResultsPage.js":"4","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\HadithQueryBuilderPage.js":"5","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\VerseQueryResultsPage.js":"6","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\VerseQueryBuilderPage.js":"7","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\CommentaryQueryResultsPage.js":"8","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\CommentaryQueryBuilderPage.js":"9","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\ChainPage.js":"10","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\PeoplePage.js":"11","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\FAQResultsPage.js":"12","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\TafseerPage.js":"13","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\GraphPage.js":"14","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\FAQPage.js":"15","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Navbar\\Navbar.js":"16","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\MainContent\\MainContent.js":"17","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\HadithQueryResults\\HadithQueryResults.js":"18","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\HadithQueryBuilder\\HadithQueryBuilder.js":"19","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\VerseQueryResults\\VerseQueryResults.js":"20","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\CommentaryQueryResults\\CommentaryQueryResults.js":"21","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\VerseQueryBuilder\\VerseQueryBuilder.js":"22","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\CommentaryQueryBuilder\\CommentaryQueryBuilder.js":"23","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Chain\\Chain.js":"24","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\FAQResults\\FAQResults.js":"25","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\People\\People.js":"26","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Tafseer\\Tafseer.js":"27","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Graph\\Graph.js":"28","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\FAQ\\FAQ.js":"29","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\MainContent\\AboutDialog.js":"30","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Footer\\Footer.js":"31","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\InfoBox\\InfoBox.js":"32","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Spinner\\Spinner.js":"33"},{"size":265,"mtime":1717087187121,"results":"34","hashOfConfig":"35"},{"size":2652,"mtime":1717087187060,"results":"36","hashOfConfig":"35"},{"size":300,"mtime":1717087187126,"results":"37","hashOfConfig":"35"},{"size":299,"mtime":1717087187125,"results":"38","hashOfConfig":"35"},{"size":299,"mtime":1717087187125,"results":"39","hashOfConfig":"35"},{"size":292,"mtime":1717087187128,"results":"40","hashOfConfig":"35"},{"size":292,"mtime":1717087187127,"results":"41","hashOfConfig":"35"},{"size":327,"mtime":1717087187123,"results":"42","hashOfConfig":"35"},{"size":327,"mtime":1717087187122,"results":"43","hashOfConfig":"35"},{"size":208,"mtime":1717087187122,"results":"44","hashOfConfig":"35"},{"size":215,"mtime":1717087187126,"results":"45","hashOfConfig":"35"},{"size":243,"mtime":1717087187124,"results":"46","hashOfConfig":"35"},{"size":229,"mtime":1717087187127,"results":"47","hashOfConfig":"35"},{"size":220,"mtime":1717087187124,"results":"48","hashOfConfig":"35"},{"size":194,"mtime":1717087187123,"results":"49","hashOfConfig":"35"},{"size":955,"mtime":1717087187103,"results":"50","hashOfConfig":"35"},{"size":3917,"mtime":1717087187101,"results":"51","hashOfConfig":"35"},{"size":10100,"mtime":1717087187097,"results":"52","hashOfConfig":"35"},{"size":16019,"mtime":1717087187095,"results":"53","hashOfConfig":"35"},{"size":9680,"mtime":1717087187112,"results":"54","hashOfConfig":"35"},{"size":8297,"mtime":1717087187086,"results":"55","hashOfConfig":"35"},{"size":20910,"mtime":1717087187110,"results":"56","hashOfConfig":"35"},{"size":17162,"mtime":1717087187084,"results":"57","hashOfConfig":"35"},{"size":6988,"mtime":1717087187081,"results":"58","hashOfConfig":"35"},{"size":2403,"mtime":1717087187090,"results":"59","hashOfConfig":"35"},{"size":18660,"mtime":1717087187105,"results":"60","hashOfConfig":"35"},{"size":22340,"mtime":1717087187109,"results":"61","hashOfConfig":"35"},{"size":944,"mtime":1717087187093,"results":"62","hashOfConfig":"35"},{"size":16862,"mtime":1717087187088,"results":"63","hashOfConfig":"35"},{"size":1901,"mtime":1717087187100,"results":"64","hashOfConfig":"35"},{"size":591,"mtime":1717087187091,"results":"65","hashOfConfig":"35"},{"size":502,"mtime":1717087187098,"results":"66","hashOfConfig":"35"},{"size":200,"mtime":1717087187106,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kmgzax",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\index.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\App.js",["178"],[],"// App.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport LandingPage from './pages/LandingPage';\r\n\r\nimport HadithQueryBuilderPage from './pages/HadithQueryBuilderPage';\r\nimport HadithQueryResultsPage from './pages/HadithQueryResultsPage';\r\n\r\nimport VerseQueryBuilderPage from './pages/VerseQueryBuilderPage';\r\nimport VerseQueryResultsPage from './pages/VerseQueryResultsPage';\r\n\r\nimport CommentaryQueryBuilderPage from './pages/CommentaryQueryBuilderPage';\r\nimport CommentaryQueryResultsPage from './pages/CommentaryQueryResultsPage';\r\n\r\nimport ChainPage from './pages/ChainPage';\r\n\r\nimport FAQPage from './pages/FAQPage';\r\n\r\nimport FAQResultsPage from './pages/FAQResultsPage';\r\n\r\nimport PeoplePage from './pages/PeoplePage';\r\n\r\nimport TafseerPage from './pages/TafseerPage';\r\n\r\nimport GraphPage from './pages/GraphPage';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={<LandingPage />}\r\n          />\r\n          <Route\r\n            path=\"/hadith-query-builder\"\r\n            element={<HadithQueryBuilderPage />} \r\n          />\r\n          <Route\r\n            path=\"/hadith-query-results\"\r\n            element={<HadithQueryResultsPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/verse-query-builder\"\r\n            element={<VerseQueryBuilderPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/verse-query-results\"\r\n            element={<VerseQueryResultsPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/chain-page\"\r\n            element={<ChainPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/commentary-query-builder\"\r\n            element={<CommentaryQueryBuilderPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/commentary-query-results\"\r\n            element={<CommentaryQueryResultsPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/faq-page\"\r\n            element={<FAQPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/faq-results\"\r\n            element={<FAQResultsPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/people-page\"\r\n            element={<PeoplePage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/tafseer-page\"\r\n            element={<TafseerPage />} \r\n          />\r\n\r\n          <Route\r\n            path=\"/al-tabari-graph\"\r\n            element={<GraphPage />} \r\n          />\r\n\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\LandingPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\HadithQueryResultsPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\HadithQueryBuilderPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\VerseQueryResultsPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\VerseQueryBuilderPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\CommentaryQueryResultsPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\CommentaryQueryBuilderPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\ChainPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\PeoplePage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\FAQResultsPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\TafseerPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\GraphPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\pages\\FAQPage.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Navbar\\Navbar.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\MainContent\\MainContent.js",["179"],[],"/* MainContent.js */\r\nimport React, { useRef, useState } from 'react'; // Importing useRef and useState hooks\r\nimport './MainContent.css';\r\nimport InfoBox from '../InfoBox/InfoBox'; // Adjusting the path to match the actual file structure\r\nimport Footer from '../Footer/Footer'; // Import Footer component\r\nimport AboutDialog from './AboutDialog'; // Import the AboutDialog component\r\n\r\nfunction MainContent() {\r\n  const infoBoxesRef = useRef(null);\r\n  const [showAboutDialog, setShowAboutDialog] = useState(false); // State to control the visibility of the AboutDialog\r\n\r\n  const handleExploreClick = () => {\r\n    // Scroll to the info-boxes section\r\n    if (infoBoxesRef.current) {\r\n      infoBoxesRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }\r\n  };\r\n  \r\n  const handleAboutClick = () => {\r\n    // Set the state to show the AboutDialog\r\n    setShowAboutDialog(true);\r\n  };\r\n\r\n  const handleCloseAboutDialog = () => {\r\n    // Set the state to hide the AboutDialog\r\n    setShowAboutDialog(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {showAboutDialog && <AboutDialog onClose={handleCloseAboutDialog} />} {/* Render the AboutDialog component conditionally */}\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"box\">\r\n          <div className=\"text\">KnowledgeVerse</div>\r\n          <div className=\"secondary-text\">\r\n            <div className=\"secondary-heading\">\r\n              Knowledge Driven Semantic Web portal for Tafsir Al-Tabari\r\n            </div>\r\n            <div className=\"side-text\">\r\n              <span className=\"italic-text\">\r\n                Semantic Web Portal to Facilitate in Research & Self-Learning of Tafseer Al-Tabari\r\n              </span>\r\n            </div>\r\n            <div className=\"buttons\">\r\n              <button className=\"explore-button\" onClick={handleExploreClick}>Explore</button>\r\n              <button className=\"about-button\" onClick={handleAboutClick}>About</button>\r\n            </div>\r\n          </div>\r\n          <img src={require('../../assets/kg-icon1.jpg')} alt=\"Knowledge Graph Image\" className=\"box-image\" />\r\n          \r\n          <div className=\"info-boxes\" ref={infoBoxesRef}>\r\n            <InfoBox \r\n              title=\"Verse\" \r\n              description=\"Explore Tafseer Al-Tabari for verse commentary\" \r\n              imageSrc={require('../../assets/verse_search.png')}\r\n              linkTo=\"/verse-query-builder\"\r\n            />\r\n            <InfoBox \r\n              title=\"Hadith\" \r\n              description=\"Examine hadith for narrator chain & more information\" \r\n              imageSrc={require('../../assets/hadith_search.png')}\r\n              linkTo=\"/hadith-query-builder\" \r\n            />\r\n            <InfoBox \r\n              title=\"Rawi\" \r\n              description=\"In Al-Tabari, find & learn about Rawi\" \r\n              imageSrc={require('../../assets/people_search.png')}\r\n              linkTo=\"/people-page\" \r\n            />\r\n            <InfoBox \r\n              title=\"Al-Tabari Knowledge Queries\" \r\n              description=\"Explore pre-built queries of Tafseer Al-Tabari\" \r\n              imageSrc={require('../../assets/top_queries.png')}\r\n              linkTo=\"/faq-page\" \r\n            />\r\n            <InfoBox \r\n              title=\"Read Tafseer Al-Tabari\" \r\n              description=\"Access the complete Tafseer Al-Tabari\" \r\n              imageSrc={require('../../assets/stack-of-books.png')}\r\n              linkTo=\"/tafseer-page\" \r\n            />\r\n            <InfoBox \r\n              title=\"Graph View\" \r\n              description=\"Visualize Tafseer Al-Tabari Graph\" \r\n              imageSrc={require('../../assets/graph_view.png')}\r\n              linkTo=\"/al-tabari-graph\" \r\n            />\r\n          </div>\r\n            <div className='Footer-portion'>\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\HadithQueryResults\\HadithQueryResults.js",["180","181","182","183","184"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './HadithQueryResults.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Footer from '../Footer/Footer';\r\nimport '../../fonts.css';\r\n\r\nconst ROWS_TO_SHOW_INITIAL = 5;\r\nconst ITEMS_PER_PAGE = 1; // Number of items to display per page\r\n\r\nconst HadithQueryResults = () => {\r\n  const location = useLocation();\r\n  const { resultsData } = location.state || {};\r\n  const navigate = useNavigate();\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n  const [visibleRows, setVisibleRows] = useState(ROWS_TO_SHOW_INITIAL);\r\n  const [narratorNames, setNarratorNames] = useState([]);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxJump, setMaxJump] = useState(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('/Drop-down-data/Hadith Dropdowns/Hadith Narrator Names.txt')\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        const names = data.split('\\n').map(name => name.trim());\r\n        setNarratorNames(names);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching narrator names:', error);\r\n      });\r\n  }, []);\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded(!isExpanded);\r\n    setVisibleRows(isExpanded ? ROWS_TO_SHOW_INITIAL : resultsData?.length);\r\n  };\r\n\r\n  const handleSort = (field) => {\r\n    if (sortOrder === 'asc') {\r\n      resultsData?.sort((a, b) => a[field]?.value.localeCompare(b[field]?.value));\r\n      setSortOrder('desc');\r\n    } else {\r\n      resultsData?.sort((a, b) => b[field]?.value.localeCompare(a[field]?.value));\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const sendHadithNumberToDifferentBackend = (hadithNo) => {\r\n    console.log(\"here\", hadithNo)\r\n    console.log('POST to a different backend endpoint');\r\n    const url = 'http://127.0.0.1:8000/api/chain_narrators/';\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ hadithNo }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseData) => {\r\n        // Use navigate to move to the Chain page\r\n        navigate('/chain-page', { state: { resultsData: responseData } });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  const handleHadithNumberClick = (hadithNo) => {\r\n    sendHadithNumberToDifferentBackend(hadithNo);\r\n  };\r\n\r\n  // const handleRootNarratorClick = (rootNarrator) => {\r\n  //   // Define the action when root narrator is clicked\r\n  //   console.log(\"Root Narrator clicked:\", rootNarrator);\r\n  // };\r\n\r\n  const handleNarratorNameClick = (Refer) => {\r\n    // Define the action when narrator name is clicked\r\n    console.log(\"Narrator Name clicked:\", Refer);\r\n    navigate('/people-page', { state: { Refer} });\r\n  };\r\n  \r\n\r\n  // const handleReferClick = (Refer) => {\r\n  //   // Pass the Refer value to the People component\r\n  //   navigate('/people-page', { state: { Refer } });\r\n  // };\r\n\r\n  const [isTextsExpanded, setIsTextsExpanded] = useState(false);\r\n\r\n  const toggleTextsExpansion = () => {\r\n    setIsTextsExpanded(!isTextsExpanded);\r\n  };\r\n\r\n  const parseHadithText = (hadithText, narratorNames, rootNarrator, refers) => {\r\n    if (!hadithText || !narratorNames) return hadithText;\r\n  \r\n    const narratorNamesArray = narratorNames.split(',').map(name => name.trim());\r\n    const rootNarratorArray = rootNarrator.split(',').map(name => name.trim());\r\n    const refersArray = refers.split(',').map(name => name.trim());\r\n    const namesArray = [...narratorNamesArray, ...rootNarratorArray, ...refersArray];\r\n  \r\n    const textWithClickableNames = [];\r\n    let currentIndex = 0;\r\n  \r\n    namesArray.forEach(name => {\r\n      const index = hadithText.indexOf(name, currentIndex);\r\n      if (index !== -1) {\r\n        textWithClickableNames.push(hadithText.substring(currentIndex, index));\r\n  \r\n        textWithClickableNames.push(\r\n          <span className=\"narrator-name\" onClick={() => handleNarratorNameClick(name)}>\r\n            {name}\r\n          </span>\r\n        );\r\n  \r\n        currentIndex = index + name.length;\r\n      }\r\n    });\r\n  \r\n    textWithClickableNames.push(hadithText.substring(currentIndex));\r\n  \r\n    return textWithClickableNames;\r\n  };\r\n  \r\n  \r\n  // style={{ fontFamily: 'UthmanTN' }}\r\n  \r\n  const renderTableData = () => {\r\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\r\n    const endIndex = startIndex + ITEMS_PER_PAGE;\r\n  \r\n    return (\r\n      resultsData &&\r\n      resultsData.slice(startIndex, endIndex).map((data, index) => (\r\n        <React.Fragment key={index}>\r\n          <tr>\r\n            <th className=\"sortable\" onClick={() => handleSort('HadithNo')}>\r\n              HadithNo {sortOrder === 'asc' ? '▲' : '▼'}\r\n            </th>\r\n            <button\r\n              className=\"hadith-number-button\"\r\n              onClick={() => handleHadithNumberClick(data.HadithNo?.value)}\r\n            >\r\n              {data.HadithNo?.value}\r\n            </button>          \r\n          </tr>\r\n          <tr>\r\n            <th>Chapters</th> \r\n            <td >{data.Chapters?.value}</td>\r\n          </tr>\r\n          <tr>\r\n          <th>NarratorNames</th>\r\n          <td>\r\n            {data.NarratorNames?.value.split(',').map((name, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"narrator-name\"\r\n                onClick={() => handleNarratorNameClick(name.trim())}\r\n              >\r\n                {name.trim()}\r\n              </span>\r\n            )).reduce((prev, curr) => [prev, ', ', curr])}\r\n          </td>\r\n        </tr>\r\n          <tr>\r\n            <th>NarratorTypes</th>\r\n            <td>{data.NarratorTypes?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Refers</th>\r\n            <td>\r\n              {data.Refers?.value.split(',').map((refer, index) => (\r\n                <span\r\n                  key={index}\r\n                  className=\"refer-name\"\r\n                  onClick={() => handleNarratorNameClick(refer.trim())}\r\n                >\r\n                  {refer.trim()}\r\n                </span>\r\n              )).reduce((prev, curr) => [prev, ', ', curr])}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>Root Narrator Types</th>\r\n            <td>{data.RootNarratorTypes?.value.split(',').map(name => name.trim()).join('  ,  ')}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Root Narrators</th>\r\n            <td>\r\n              {data.RootNarrators?.value.split(',').map((rootNarrator, index) => (\r\n                <span\r\n                  key={index}\r\n                  className=\"root-narrator-name\"\r\n                  onClick={() => handleNarratorNameClick(rootNarrator.trim())}\r\n                >\r\n                  {rootNarrator.trim()}\r\n                </span>\r\n              )).reduce((prev, curr) => [prev, ', ', curr])}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>Sub Themes</th>\r\n            <td>{data.Subthemes?.value}</td>\r\n          </tr>\r\n          {data.Texts?.value && (\r\n            <tr>\r\n              {index === 0 && <th>Hadith Text</th>}\r\n              <td>\r\n                {isTextsExpanded ? parseHadithText(data.Texts?.value, data.NarratorNames?.value, data.RootNarrators?.value, data.Refers?.value) : `${data.Texts?.value.slice(0, 100)}...`}\r\n                {data.Texts?.value && (\r\n                  <button className=\"view-more-button\" onClick={toggleTextsExpansion}>\r\n                    {isTextsExpanded ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n\r\n          <tr>\r\n            <th>Themes</th>\r\n            <td>{data.Themes?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Verse Nos</th>\r\n            <td>{data.VerseNos?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Verse Texts</th>\r\n            <td>{data.VerseTexts?.value}</td>\r\n          </tr>\r\n        </React.Fragment>\r\n      ))\r\n    );\r\n  };\r\n  \r\n\r\n  const handleNextPage = () => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handleJumpToPage = (pageNumber) => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(Math.max(pageNumber, 1), totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"back-button-HQR\" onClick={() => window.history.back()}>\r\n        <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n      </div>\r\n      {resultsData && (\r\n        <div className=\"details-table-HQR\">\r\n          <table>\r\n            <tbody>{renderTableData()}</tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      <div className=\"pagination top-right-HQR\">\r\n        <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n          Prev\r\n        </button>\r\n        <span>{`Page ${currentPage}`}</span>\r\n        <button onClick={handleNextPage} disabled={currentPage * ITEMS_PER_PAGE >= resultsData.length}>\r\n          Next\r\n        </button>\r\n      </div>\r\n      <div className=\"pagination top-right-HQR-2\">\r\n        <span id=\"page-jump-HQR\">Jump to :</span>\r\n        <input\r\n          type=\"number\"\r\n          value={currentPage}\r\n          onChange={(e) => setCurrentPage(e.target.value)}\r\n          min={1}\r\n          max={maxJump}\r\n        />\r\n        <span id=\"page-max-HQR\">{`Max: ${maxJump}`}</span>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HadithQueryResults;\r\n\r\n/*\r\ncommtexts\r\nhadithtexts\r\nsegment_texts\r\nnames\r\nreferences\r\n*/","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\HadithQueryBuilder\\HadithQueryBuilder.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\VerseQueryResults\\VerseQueryResults.js",["185","186","187"],[],"import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './VerseQueryResults.css';\r\nimport Footer from '../Footer/Footer'; // Import Footer component\r\n\r\nconst ITEMS_PER_PAGE = 1; // Number of items to display per page\r\n\r\nconst VerseQueryResults = () => {\r\n  const location = useLocation();\r\n  const { resultsData } = location.state || {};\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [sortOrder, setSortOrder] = useState('asc'); // Initial sort order\r\n  const [maxJump, setMaxJump] = useState(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n\r\n  // State variables to track whether each section should be expanded\r\n  const [isCommentaryExpanded, setIsCommentaryExpanded] = useState(false);\r\n  const [isHadithExpanded, setIsHadithExpanded] = useState(false);\r\n  const [isSegmentExpanded, setIsSegmentExpanded] = useState(false);\r\n\r\n  const handleSort = (field) => {\r\n    if (sortOrder === 'asc') {\r\n      resultsData?.sort((a, b) => a[field]?.value.localeCompare(b[field]?.value));\r\n      setSortOrder('desc');\r\n    } else {\r\n      resultsData?.sort((a, b) => b[field]?.value.localeCompare(a[field]?.value));\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const toggleCommentaryExpansion = () => {\r\n    setIsCommentaryExpanded(!isCommentaryExpanded);\r\n  };\r\n\r\n  const toggleHadithExpansion = () => {\r\n    setIsHadithExpanded(!isHadithExpanded);\r\n  };\r\n\r\n  const toggleSegmentExpansion = () => {\r\n    setIsSegmentExpanded(!isSegmentExpanded);\r\n  };\r\n\r\n  const renderTableData = () => {\r\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\r\n    const endIndex = startIndex + ITEMS_PER_PAGE;\r\n\r\n    return (\r\n      resultsData &&\r\n      resultsData.slice(startIndex, endIndex).map((data, index) => (\r\n        <React.Fragment key={index}>\r\n          <tr>\r\n            {index === 0 && <th>Verse Number</th>}\r\n            <td>{data.Verseno?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Surah Name</th>}\r\n            <td>{data.Surahnames?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Text</th>}\r\n            <td>{data.Texts?.value}</td>\r\n          </tr>\r\n          {/* Render the commentary text with \"View more\" button */}\r\n          {data.commtexts?.value && (\r\n          <tr>\r\n            {index === 0 && <th>Commentary Text</th>}\r\n            <td>\r\n              {isCommentaryExpanded ? parseText(data.segment_texts?.value, data.names?.value, data.references?.value) : `${data.commtexts?.value.slice(0, 150)}...`}\r\n              {data.commtexts?.value && (\r\n                <button className=\"view-more-button\" onClick={toggleCommentaryExpansion}>\r\n                  {isCommentaryExpanded ? 'View less' : 'View more'}\r\n                </button>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )}\r\n          {/* Render the Hadith text with \"View more\" button */}\r\n          {data.hadithtexts?.value && (\r\n          <tr>\r\n            {index === 0 && <th>Hadith Text</th>}\r\n            <td>\r\n              {isHadithExpanded ? parseText(data.hadithtexts?.value, data.names?.value, data.references?.value) : `${data.hadithtexts?.value.slice(0, 100)}...`}\r\n              {data.hadithtexts?.value && (\r\n                <button className=\"view-more-button\" onClick={toggleHadithExpansion}>\r\n                  {isHadithExpanded ? 'View less' : 'View more'}\r\n                </button>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )}\r\n          {/* Render the segment text with \"View more\" button */}\r\n          {data.segment_texts?.value && (\r\n            <tr>\r\n              {index === 0 && <th>Segment Text</th>}\r\n              <td>\r\n                {isSegmentExpanded ? parseText(data.segment_texts?.value, data.names?.value, data.references?.value) : `${data.segment_texts?.value.slice(0, 100)}...`}\r\n                {data.segment_texts?.value && (\r\n                  <button className=\"view-more-button\" onClick={toggleSegmentExpansion}>\r\n                    {isSegmentExpanded ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n          <tr>\r\n            {index === 0 && <th>Chapter</th>}\r\n            <td>{data.chapter?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Commentary Number</th>}\r\n            <td>{data.commnos?.value.split(';').map(name => name.trim()).join(' ;  ')}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Hadith Number</th>}\r\n            <td>{data.hadithnos?.value.split(';').map(name => name.trim()).join('  ;  ')}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Name</th>}\r\n            <td>\r\n              {data.names?.value.split(';').map((name, index) => (\r\n                <span\r\n                  key={index}\r\n                  className=\"narrator-name-VQR\"\r\n                  onClick={() => handleNarratorNameClick(name.trim())}\r\n                >\r\n                  {name.trim()}\r\n                </span>\r\n              )).reduce((prev, curr) => [prev, ', ', curr])}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            {index === 0 && <th>Reference</th>}\r\n            <td>\r\n              {data.references?.value.split(';').map((reference, index) => (\r\n                <span\r\n                  key={index}\r\n                  className=\"narrator-name-VQR\"\r\n                  onClick={() => handleNarratorNameClick(reference.trim())} // Define handleReferenceClick function\r\n                >\r\n                  {reference.trim()}\r\n                </span>\r\n              )).reduce((prev, curr) => [prev, ', ', curr])}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            {index === 0 && <th>Subtheme</th>}\r\n            <td>{data.subthemes?.value.split(';').map(name => name.trim()).join('  ;  ')}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Theme Name</th>}\r\n            <td>{data.themenames?.value.split(';').map(name => name.trim()).join('  ;  ')}</td>\r\n          </tr>\r\n          <tr>\r\n            {index === 0 && <th>Hadith Theme</th>}\r\n            <td>{data.hadithThemes?.value.split(';').map(name => name.trim()).join('  ;  ')}</td>\r\n          </tr>\r\n        </React.Fragment>\r\n      ))\r\n    );\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handleJumpToPage = (pageNumber) => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(Math.max(pageNumber, 1), totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n  \r\n\r\n  const handleNarratorNameClick = (Refer) => {\r\n    // Define the action when narrator name is clicked\r\n    console.log(\"Narrator Name clicked:\", Refer);\r\n    navigate('/people-page', { state: { Refer} });\r\n  };\r\n  // 1) Parsing Hadith Text\r\n\r\n  const parseText = (hadithText, narratorNames, refers) => {\r\n    if (!hadithText || !narratorNames) return hadithText;\r\n  \r\n    const narratorNamesArray = narratorNames.split(';').map(name => name.trim());\r\n    const refersArray = refers.split(';').map(name => name.trim());\r\n    const namesArray = [...narratorNamesArray, ...refersArray];\r\n  \r\n    const textWithClickableNames = [];\r\n    let currentIndex = 0;\r\n  \r\n    namesArray.forEach(name => {\r\n      const index = hadithText.indexOf(name, currentIndex);\r\n      if (index !== -1) {\r\n        textWithClickableNames.push(hadithText.substring(currentIndex, index));\r\n  \r\n        textWithClickableNames.push(\r\n          <span className=\"narrator-name-VQR\" onClick={() => handleNarratorNameClick(name)}>\r\n            {name}\r\n          </span>\r\n        );\r\n  \r\n        currentIndex = index + name.length;\r\n      }\r\n    });\r\n  \r\n    textWithClickableNames.push(hadithText.substring(currentIndex));\r\n  \r\n    return textWithClickableNames;\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"verse-query-results\">\r\n        <div className=\"pagination top-right-VQR\">\r\n          <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n            Prev\r\n          </button>\r\n          <span>{`Page ${currentPage}`}</span>\r\n          <button onClick={handleNextPage} disabled={currentPage * ITEMS_PER_PAGE >= resultsData.length}>\r\n            Next\r\n          </button>\r\n        </div>\r\n        <div className=\"pagination top-right-VQR-2\">\r\n          <span id=\"page-jump-VQR\">Jump to:</span>\r\n          <input\r\n            type=\"number\"\r\n            value={currentPage}\r\n            onChange={(e) => setCurrentPage(e.target.value)}\r\n            min={1}\r\n            max={maxJump}\r\n          />\r\n          <span id=\"page-max-VQR\">{`Max: ${maxJump}`}</span>\r\n        </div>\r\n        <div className=\"back-button-VQR\" onClick={() => window.history.back()}>\r\n          <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n        </div>\r\n\r\n        {resultsData && (\r\n          <div className=\"details-table-VQR\">\r\n            <table>\r\n              <tbody>{renderTableData()}</tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerseQueryResults;\r\n\r\n\r\n/*\r\nV_Texts\r\nTexts\r\nsec_texts\r\nperson_names\r\n*/","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\CommentaryQueryResults\\CommentaryQueryResults.js",["188","189"],[],"import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport './CommentaryQueryResults.css';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst ITEMS_PER_PAGE = 1; // Number of items to display per page\r\n\r\nconst CommentaryQueryResults = () => {\r\n  const location = useLocation();\r\n  const { resultsData } = location.state || {};\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [sortOrder, setSortOrder] = useState('asc'); // Initial sort order\r\n\r\n  const [maxJump, setMaxJump] = useState(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n\r\n  const handleSort = (field) => {\r\n    if (sortOrder === 'asc') {\r\n      resultsData?.sort((a, b) => a[field]?.value.localeCompare(b[field]?.value));\r\n      setSortOrder('desc');\r\n    } else {\r\n      resultsData?.sort((a, b) => b[field]?.value.localeCompare(a[field]?.value));\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const [isTextsExpanded, setIsTextsExpanded] = useState(false);\r\n\r\n  const toggleTextsExpansion = () => {\r\n    setIsTextsExpanded(!isTextsExpanded);\r\n  };\r\n\r\n\r\n  const [isSecTextsExpanded, setIsSecTextsExpanded] = useState(false);\r\n\r\n  const toggleSecTextsExpansion = () => {\r\n    setIsSecTextsExpanded(!isSecTextsExpanded);\r\n  };\r\n\r\n  const [isVTextsExpanded, setIsVTextsExpanded] = useState(false);\r\n\r\n  const toggleVTextsExpansion = () => {\r\n    setIsVTextsExpanded(!isVTextsExpanded);\r\n  };\r\n\r\n  const renderTableData = () => {\r\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\r\n    const endIndex = startIndex + ITEMS_PER_PAGE;\r\n\r\n    return (\r\n      resultsData &&\r\n      resultsData.slice(startIndex, endIndex).map((data, index) => (\r\n        <React.Fragment key={index}>\r\n          <tr>\r\n            <th className=\"sortable\" onClick={() => handleSort('V_nos')}>\r\n              Commentary Number {sortOrder === 'asc' ? '▲' : '▼'}\r\n            </th>\r\n            <td>{data.number?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Surah Number</th>\r\n            <td>{data.chapter_nos?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Verse Number</th>\r\n            <td>{data.V_nos?.value}</td>\r\n          </tr>\r\n          {data.V_Texts?.value && (\r\n          <tr>\r\n            {index === 0 && <th>Verse Text</th>}\r\n            <td>\r\n              {isVTextsExpanded ? parseText(data.V_Texts?.value, data.person_names?.value) : `${data.V_Texts?.value.slice(0, 100)}...`}\r\n              {data.V_Texts?.value && (\r\n                <button className=\"view-more-button\" onClick={toggleVTextsExpansion}>\r\n                  {isVTextsExpanded ? 'View less' : 'View more'}\r\n                </button>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )}\r\n          {data.Texts?.value && (\r\n          <tr>\r\n            {index === 0 && <th>Text</th>}\r\n            <td>\r\n              {isTextsExpanded ? parseText(data.Texts?.value, data.person_names?.value) : `${data.Texts?.value.slice(0, 100)}...`}\r\n              {data.Texts?.value && (\r\n                <button className=\"view-more-button\" onClick={toggleTextsExpansion}>\r\n                  {isTextsExpanded ? 'View less' : 'View more'}\r\n                </button>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )}\r\n          <tr>\r\n            <th>Section Chapter</th>\r\n            <td>{data.sec_chps?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Section Number</th>\r\n            <td>{data.sec_nos?.value}</td>\r\n          </tr>\r\n          {data.sec_texts?.value && (\r\n          <tr>\r\n            {index === 0 && <th>Section Text</th>}\r\n            <td>\r\n              {isSecTextsExpanded ? parseText(data.sec_texts?.value, data.person_names?.value) : `${data.sec_texts?.value.slice(0, 100)}...`}\r\n              {data.sec_texts?.value && (\r\n                <button className=\"view-more-button\" onClick={toggleSecTextsExpansion}>\r\n                  {isSecTextsExpanded ? 'View less' : 'View more'}\r\n                </button>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )}\r\n        <tr>\r\n          <th>Person Names</th>\r\n          <td>\r\n            {data.person_names?.value.split(',').map((name, i) => (\r\n              <React.Fragment key={i}>\r\n                <span\r\n                  className=\"narrator-name-CQR\"\r\n                  onClick={() => handleNarratorNameClick(name.trim())}\r\n                >\r\n                  {name.trim()}\r\n                </span>\r\n                {i !== data.person_names?.value.split(',').length - 1 && ', '}\r\n              </React.Fragment>\r\n            ))}\r\n          </td>\r\n        </tr>\r\n\r\n          <tr>\r\n            <th>Subthemes</th>\r\n            <td>{data.subthemes?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Theme Names</th>\r\n            <td>{data.theme_names?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Volumes</th>\r\n            <td>{data.volumes?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Editions</th>\r\n            <td>{data.editions?.value}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Pages</th>\r\n            <td>{data.pages?.value}</td>\r\n          </tr>\r\n        </React.Fragment>\r\n      ))\r\n    );\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n  const handleJumpToPage = (pageNumber) => {\r\n    const totalPages = Math.ceil(resultsData?.length / ITEMS_PER_PAGE);\r\n    setCurrentPage((prevPage) => Math.min(Math.max(pageNumber, 1), totalPages));\r\n    setMaxJump(Math.ceil(resultsData?.length / ITEMS_PER_PAGE));\r\n  };\r\n\r\n\r\n  const handleNarratorNameClick = (Refer) => {\r\n    // Define the action when narrator name is clicked\r\n    console.log(\"Narrator Name clicked:\", Refer);\r\n    navigate('/people-page', { state: { Refer} });\r\n  };\r\n  // 1) Parsing Hadith Text\r\n\r\n  const parseText = (hadithText, narratorNames) => {\r\n    if (!hadithText || !narratorNames) return hadithText;\r\n  \r\n    const narratorNamesArray = narratorNames.split(',').map(name => name.trim());\r\n    const namesArray = [...narratorNamesArray];\r\n  \r\n    const textWithClickableNames = [];\r\n    let currentIndex = 0;\r\n  \r\n    namesArray.forEach(name => {\r\n      const index = hadithText.indexOf(name, currentIndex);\r\n      if (index !== -1) {\r\n        textWithClickableNames.push(hadithText.substring(currentIndex, index));\r\n  \r\n        textWithClickableNames.push(\r\n          <span className=\"narrator-name-CQR\" onClick={() => handleNarratorNameClick(name)}>\r\n            {name}\r\n          </span>\r\n        );\r\n  \r\n        currentIndex = index + name.length;\r\n      }\r\n    });\r\n  \r\n    textWithClickableNames.push(hadithText.substring(currentIndex));\r\n  \r\n    return textWithClickableNames;\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"back-button-VQR\" onClick={() => window.history.back()}>\r\n        <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n      </div>\r\n      {resultsData && (\r\n        <div className=\"details-table-CQR\">\r\n          <table>\r\n            <tbody>{renderTableData()}</tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      <div className=\"pagination top-right-CQR\">\r\n        <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n          Prev\r\n        </button>\r\n        <span>{`Page ${currentPage}`}</span>\r\n        <button onClick={handleNextPage} disabled={currentPage * ITEMS_PER_PAGE >= resultsData.length}>\r\n          Next\r\n        </button>\r\n      </div>\r\n      <div className=\"pagination top-right-CQR-2\">\r\n        <span id=\"page-jump-CQR\">Jump to :</span>\r\n        <input\r\n          type=\"number\"\r\n          value={currentPage}\r\n          onChange={(e) => setCurrentPage(e.target.value)}\r\n          min={1}\r\n          max={maxJump}\r\n        />\r\n        <span id=\"page-max-CQR\">{`Max: ${maxJump}`}</span>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentaryQueryResults;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\VerseQueryBuilder\\VerseQueryBuilder.js",["190"],[],"//VerseQueryBuilder.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Select from 'react-select';\r\nimport './VerseQueryBuilder.css';\r\nimport Footer from '../Footer/Footer'; // Import Footer component\r\nimport { Oval as Loader } from 'react-loader-spinner';\r\n\r\n\r\n// Verse Contents\r\n\r\nconst VerseQueryBuilder = () => {\r\n  const navigate = useNavigate();\r\n  const [selectedOption, setSelectedOption] = useState('verse');\r\n  const [data, setData] = useState({\r\n    chapterNo: '',\r\n    verseNo: '',\r\n    theme: '',\r\n    //hadithTheme: '',\r\n    narrator: [{ hadithTheme: '', name: '' }],\r\n    reference: '',\r\n  });\r\n\r\n  const handleRadioChange = (option) => {\r\n    setSelectedOption(option);\r\n    switch (option) {\r\n      case 'verse':\r\n        navigate('/verse-query-builder');\r\n        break;\r\n      case 'hadith':\r\n        navigate('/hadith-query-builder');\r\n        break;\r\n      case 'commentary':\r\n        navigate('/commentary-query-builder');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (selectedOption) => {\r\n    setData({\r\n      ...data,\r\n      theme: selectedOption.value,\r\n    });\r\n  };\r\n\r\n  const handleHadithThemeChange = (selectedOption) => {\r\n    setData({\r\n      ...data,\r\n      hadithTheme: selectedOption.value,\r\n    });console.log(\"This is inside handle: \",data.hadithTheme)\r\n  };\r\n\r\n  const handleNarratorChange = (index, type, value) => {\r\n    const updatedNarrators = [...data.narrator];\r\n    const hadithTheme = value;\r\n    updatedNarrators[index][type] = hadithTheme;\r\n    setData({\r\n      ...data,\r\n      narrator: updatedNarrators,\r\n    });\r\n  };\r\n\r\n const handleAddNarrator = () => {\r\n  setData((prevData) => ({\r\n    ...prevData,\r\n    narrator: [...prevData.narrator, { hadithTheme: '', name: '' }],\r\n  }));\r\n\r\n  setNarratorLogic((prevLogic) => [...prevLogic, 'AND']); // Initialize logic for the new narrator\r\n};\r\n\r\n\r\n  const handleRemoveNarrator = (index) => {\r\n    const updatedNarrators = [...data.narrator];\r\n    const updatedLogic = [...narratorLogic];\r\n  \r\n    updatedNarrators.splice(index, 1);\r\n    updatedLogic.splice(index, 1);\r\n  \r\n    setData({\r\n      ...data,\r\n      narrator: updatedNarrators,\r\n    });\r\n  \r\n    setNarratorLogic(updatedLogic);\r\n  };\r\n\r\n  const handleMentionsChange = (selectedOption) => {\r\n    setData({\r\n      ...data,\r\n      reference: selectedOption.value,\r\n    });\r\n  };\r\n\r\n  const handleChapterNoChange = (selectedOption) => {\r\n    setData({\r\n      ...data,\r\n      chapterNo: selectedOption.value,\r\n    });\r\n  };\r\n  \r\n  const handleVerseNoChange = (selectedOption) => {\r\n    setData({\r\n      ...data,\r\n      verseNo: selectedOption.value,\r\n    });\r\n  };\r\n\r\n  const SendDataToBackend = () => {\r\n    // Check if any field is selected\r\n    if (\r\n      data.chapterNo === '' &&\r\n      data.verseNo === '' &&\r\n      data.reference === '' &&\r\n      data.theme === '' &&\r\n      data.narrator.every((narrator) => narrator.hadithTheme === '' && narrator.name === '')\r\n    ) {\r\n      // If no field is selected, show alert\r\n      alert('Please select at least one option');\r\n      return;\r\n    }\r\n  \r\n    // Include narrator logic in the JSON data\r\n    const updatedNarrators = data.narrator.map((narrator, index) => ({\r\n      ...narrator,\r\n      narratorLogic: narratorLogic[index] // Include narrator logic for each narrator\r\n    }));\r\n\r\n    const requestData = {\r\n      ...data,\r\n      narrator: updatedNarrators, // Include updated narrators array with logic\r\n      applyLimit: true,\r\n      limit: limitValue\r\n    };\r\n  \r\n    console.log(\"POST\");\r\n    console.log(data.hadithTheme); // Add this line\r\n    const url = 'http://127.0.0.1:8000/api/query_verse/';\r\n    setLoading(true);\r\n  \r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(requestData), // Only include the relevant data in the request\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseData) => {\r\n        console.log('Success:', responseData);\r\n  \r\n        if (responseData.result && responseData.result.results && responseData.result.results.bindings) {\r\n          const results = responseData.result.results.bindings;\r\n          console.log('Results:', results);\r\n  \r\n          navigate('/verse-query-results', { state: { resultsData: results } });\r\n        } else {\r\n          console.error('Results or bindings not found in response data.');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.error('Error:', error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n  \r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [limitValue, setLimitValue] = useState(0);\r\n\r\nconst incrementValue = () => {\r\n  setLimitValue(Math.min(limitValue + 1, MAX_LIMIT));\r\n};\r\n\r\nconst decrementValue = () => {\r\n  setLimitValue(Math.max(limitValue - 1, 0));\r\n};\r\n\r\n// Define MAX_LIMIT constant if needed\r\nconst MAX_LIMIT = 2000; // Example value\r\n\r\n// Logic Gates\r\nconst [narratorLogic, setNarratorLogic] = useState(Array(data.narrator.length).fill('AND'));\r\n\r\nconst handleNarratorLogicChange = (index) => {\r\n  setNarratorLogic((prevLogic) => {\r\n    const updatedLogic = [...prevLogic];\r\n    updatedLogic[index] = updatedLogic[index] === 'AND' ? 'OR' : 'AND';\r\n    return updatedLogic;\r\n  });\r\n};\r\n\r\n\r\n/* Verse Number Filter Selection */\r\nconst [verseNumberInputValue, setVerseNumberInputValue] = useState('');\r\nconst [filteredVerseNumbers, setFilteredVerseNumbers] = useState([]);\r\n\r\nconst handleVerseNumberInputChange = (inputValue) => {\r\n  setVerseNumberInputValue(inputValue);\r\n  const filteredOptions = verseNoOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredVerseNumbers(filteredOptions.slice(0, 11));\r\n};\r\n\r\n/* Chapter Number Filter Selection */\r\nconst [chapterNumberInputValue, setChapterNumberInputValue] = useState('');\r\nconst [filteredChapterNumbers, setFilteredChapterNumbers] = useState([]);\r\n\r\nconst handleChapterNumberInputChange = (inputValue) => {\r\n  setChapterNumberInputValue(inputValue);\r\n  const filteredOptions = chapterNoOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredChapterNumbers(filteredOptions.slice(0, 11));\r\n};\r\n\r\n/* Verse Commentary Theme Filter Selection */\r\nconst [themeInputValue, setThemeInputValue] = useState('');\r\nconst [filteredThemeOptions, setFilteredThemes] = useState([]);\r\n\r\nconst handleThemeInputChange = (inputValue) => {\r\n  setThemeInputValue(inputValue);\r\n  const filteredOptions = themeOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredThemes(filteredOptions.slice(0, 8));\r\n};\r\n\r\n/* Verse Mentions Filter Selection */\r\nconst [mentionsInputValue, setMentionsInputValue] = useState('');\r\nconst [filteredMentions, setFilteredMentions] = useState([]);\r\n\r\nconst handleMentionsInputChange = (inputValue) => {\r\n  setMentionsInputValue(inputValue);\r\n  const filteredOptions = mentionsOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredMentions(filteredOptions.slice(0, 8));\r\n};\r\n\r\n/* Verse Hadith Narrator Name Filter Selection */\r\nconst [narratorNameInputValue, setNarratorNameInputValue] = useState('');\r\nconst [filteredNarratorNames, setFilteredNarratorNames] = useState([]);\r\n\r\nconst handleNarratorNameInputChange = (inputValue) => {\r\n  setNarratorNameInputValue(inputValue);\r\n  const filteredOptions = narratorNameOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredNarratorNames(filteredOptions.slice(0, 8));\r\n};\r\n\r\n/* Verse Hadith Theme Filter Selection */\r\nconst [verseHadithThemeInputValue, setVerseHadithThemeInputValue] = useState('');\r\nconst [filteredVerseHadithThemeOptions, setFilteredVerseHadithThemes] = useState([]);\r\n\r\nconst handleVerseHadithThemeInputChange = (inputValue) => {\r\n  setVerseHadithThemeInputValue(inputValue);\r\n  const filteredOptions = hadithThemeOptions.filter((option) =>\r\n    option.label.toLowerCase().startsWith(inputValue.toLowerCase())\r\n  );\r\n  setFilteredVerseHadithThemes(filteredOptions.slice(0, 8));\r\n};\r\n\r\n// Fetch TXT\r\nconst [verseNoOptions, setVerseNoOptions] = useState([]);\r\n\r\nconst [chapterNoOptions, setChapterNoOptions] = useState([]);\r\nconst [themeOptions, setThemeOptions] = useState([]);\r\nconst [narratorNameOptions, setNarratorNameOptions] = useState([]);\r\nconst [mentionsOptions, setMentionsOptions] = useState([]);\r\n\r\nconst [hadithThemeOptions, setHadithThemeOptions] = useState([]);\r\n\r\n// VerseNo\r\nuseEffect(() => {\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Ayat Number.txt')\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      const verses = data\r\n        .split('\\n')\r\n        .map((verse) => verse.trim())\r\n        .filter((verse) => verse !== '') // Remove empty lines, if any\r\n        .sort((a, b) => parseInt(a) - parseInt(b)) // Sort in ascending order\r\n        .map((sortedVerse) => ({\r\n          value: sortedVerse,\r\n          label: sortedVerse,\r\n        }));\r\n      setVerseNoOptions(verses);\r\n      setFilteredVerseNumbers(verses.slice(0, 11));\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching and sorting verse numbers:', error);\r\n    });\r\n}, []);\r\n\r\n// Chapter No\r\nuseEffect(() => {\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Surah Number.txt')\r\n  .then((response) => response.text())\r\n  .then((data) => {\r\n    const chapters = data\r\n      .split('\\n')\r\n      .map((chapter) => chapter.trim())\r\n      .filter((chapter) => chapter !== '') // Remove empty lines, if any\r\n      .sort((a, b) => parseInt(a) - parseInt(b)) // Sort in ascending order\r\n      .map((sortedChapter) => ({\r\n        value: sortedChapter,\r\n        label: sortedChapter,\r\n      }));\r\n    setChapterNoOptions(chapters)\r\n    setFilteredChapterNumbers(chapters.slice(0, 11));\r\n  })\r\n  .catch((error) => {\r\n    console.error('Error fetching and sorting chapter numbers:', error);\r\n  });\r\n}, []);\r\n\r\n// themes\r\nuseEffect(() => {\r\n  // Fetch the text file from the public folder\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Commentary Themes.txt')\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      // Split the file content by lines and start from line 2\r\n      const themes = data.split('\\n').slice(1).map((theme) => {\r\n        // Remove the leading colon from each theme\r\n        const trimmedTheme = theme.trim();\r\n        const themeWithoutColon = trimmedTheme.startsWith(':') ? trimmedTheme.substring(1) : trimmedTheme;\r\n        return { value: themeWithoutColon, label: themeWithoutColon };\r\n      });\r\n      setThemeOptions(themes);\r\n      setFilteredThemes(themes.slice(0, 8));\r\n\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching themes:', error);\r\n    });\r\n}, []);\r\n\r\n// hadithThemes\r\nuseEffect(() => {\r\n  // Fetch the text file from the public folder\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Hadith Themes.txt')\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      // Split the file content by lines and start from line 2\r\n      const hadithThemes = data.split('\\n').map((hadithTheme) => {\r\n        // Remove the leading colon from each theme\r\n        const trimmedHadithTheme = hadithTheme.trim();\r\n        const hadithThemeWithoutColon = trimmedHadithTheme.startsWith(':') ? trimmedHadithTheme.substring(1) : trimmedHadithTheme;\r\n        return { value: hadithThemeWithoutColon, label: hadithThemeWithoutColon };\r\n      });\r\n      setHadithThemeOptions(hadithThemes);\r\n      setFilteredVerseHadithThemes(hadithThemes.slice(0, 8));\r\n\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching hadithThemes:', error);\r\n    });\r\n}, []);\r\n\r\n// Narrators\r\nuseEffect(() => {\r\n  // Fetch the text file from the public folder\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Hadith Narrator Names.txt')\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      // Split the file content by lines and start from line 2\r\n      const narrator_name = data.split('\\n').map((narrator_name) => {\r\n        // Remove the leading colon from each narrator_name\r\n        const trimmedNarratorName = narrator_name.trim();\r\n        const narratorNameWithoutColon = trimmedNarratorName.startsWith(':') ? trimmedNarratorName.substring(1) : trimmedNarratorName;\r\n        return { value: narratorNameWithoutColon, label: narratorNameWithoutColon };\r\n      });\r\n      setNarratorNameOptions(narrator_name);\r\n      setFilteredNarratorNames(narrator_name.slice(0, 8));\r\n\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching narrator name:', error);\r\n    });\r\n}, []);\r\n\r\n// Fetch mentioned persons from the text file\r\nuseEffect(() => {\r\n  fetch('/Drop-down-data/Verse Dropdowns/Verse Hadith Mentions.txt')\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      // Split the file content by lines\r\n      const lines = data.split('\\n');\r\n      // Process each line to extract the full name\r\n      const mentionedPersons = lines.map((line) => {\r\n        const fullName = line.trim();\r\n        return { value: fullName, label: fullName };\r\n      });\r\n      // Set the options in state\r\n      setMentionsOptions(mentionedPersons);\r\n      setFilteredMentions(mentionedPersons.slice(0, 8));\r\n\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching mentioned persons:', error);\r\n    });\r\n}, []);\r\n\r\n//end\r\n\r\n  return (\r\n    <div className=\"verse-query-builder\">\r\n      <div className=\"back-button-verse\">\r\n        <img\r\n          src={require('../../assets/back_button.png')}\r\n          alt=\"Back Button\"\r\n          onClick={() => window.history.back()}\r\n        />\r\n      </div>\r\n      <div className=\"radio-buttons-verse\">\r\n        <label className={`radio-button-verse ${selectedOption === 'hadith' ? 'selected' : ''}`}>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"queryType\"\r\n            value=\"hadith\"\r\n            onChange={() => handleRadioChange('hadith')}\r\n            checked={selectedOption === 'hadith'}\r\n          />\r\n          <span> <p id=\"rH\">Hadith</p> </span>\r\n        </label>\r\n        <label className={`radio-button-verse ${selectedOption === 'verse' ? 'selected' : ''}`}>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"queryType\"\r\n            value=\"verse\"\r\n            onChange={() => handleRadioChange('verse')}\r\n            checked={selectedOption === 'verse'}\r\n          />\r\n          <span> <p id=\"rV\">Verse</p> </span>\r\n        </label>\r\n        <label className={`radio-button-verse ${selectedOption === 'commentary' ? 'selected' : ''}`}>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"queryType\"\r\n            value=\"commentary\"\r\n            onChange={() => handleRadioChange('commentary')}\r\n            checked={selectedOption === 'commentary'}\r\n          />\r\n          <span> <p id=\"rC\">Commentary</p> </span>\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"query-box-verse\">\r\n      <div className=\"search-text-verse\">Search for Verse with:</div>\r\n      <div className=\"dropdown-container-verse\">\r\n            <div className=\"dropdown-verse\">\r\n              <label htmlFor=\"chapterNo\">Surah Number</label>\r\n              <Select\r\n              options={filteredChapterNumbers}\r\n              inputValue={chapterNumberInputValue}\r\n              isSearchable={true}\r\n              onInputChange={handleChapterNumberInputChange}\r\n              onChange={handleChapterNoChange}\r\n            />                    \r\n            </div>\r\n            <div className=\"dropdown-verse\">\r\n              <label htmlFor=\"Verseno\">Ayat Number</label>\r\n              <Select\r\n              options={filteredVerseNumbers}\r\n              inputValue={verseNumberInputValue}\r\n              isSearchable={true}\r\n              onInputChange={handleVerseNumberInputChange}\r\n              onChange={handleVerseNoChange}\r\n            />             \r\n            </div>\r\n\r\n            <div className=\"dropdown-verse\">\r\n              <label htmlFor=\"theme\">Where its commentary has Theme</label>\r\n              <Select \r\n                options={filteredThemeOptions}\r\n                inputValue={themeInputValue} \r\n                isSearchable={true} \r\n                onInputChange={handleThemeInputChange}\r\n                onChange={handleThemeChange} \r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"add-narrator-button-verse\">\r\n            <div className=\"add-content-verse\" onClick={handleAddNarrator}>\r\n              <img\r\n                src={require('../../assets/add.png')} \r\n                alt=\"Add Narrator\"\r\n                className=\"add-image-verse\"\r\n              />\r\n              <p id=\"add-narrator-text-verse\">Add Condition</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"narrators-verse\">\r\n          {data.narrator.map((narrator, index) => (\r\n            <div key={index} className=\"narrator-verse\">\r\n              <p> Where the verse is referenced by Hadith</p>\r\n              <div className=\"narrator-logic-buttons-verse\">\r\n                <button\r\n                  className={`logic-button-verse ${narratorLogic[index] === 'AND' ? 'selected' : ''}`}\r\n                  onClick={() => handleNarratorLogicChange(index)}\r\n                >\r\n                  AND\r\n                </button>\r\n                <button\r\n                  className={`logic-button-verse ${narratorLogic[index] === 'OR' ? 'selected' : ''}`}\r\n                  onClick={() => handleNarratorLogicChange(index)}\r\n                >\r\n                  OR\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"dropdown-verse\">\r\n                <label htmlFor={`hadithTheme${index}`}> Theme </label>\r\n              <Select \r\n                options={filteredVerseHadithThemeOptions}\r\n                inputValue={verseHadithThemeInputValue} \r\n                isSearchable={true} \r\n                onInputChange={handleVerseHadithThemeInputChange}\r\n                onChange={(selectedOption) =>\r\n                  handleNarratorChange(index, 'hadithTheme', selectedOption.value)\r\n                }\r\n              />\r\n              </div>\r\n\r\n              <div className=\"dropdown-verse\">\r\n                <label htmlFor={`narrator_name_${index}`}>Narrator Name</label>\r\n                <Select\r\n                  options={filteredNarratorNames}\r\n                  inputValue={narratorNameInputValue}\r\n                  isSearchable={true}\r\n                  onInputChange={handleNarratorNameInputChange}\r\n                  onChange={(selectedOption) =>\r\n                    handleNarratorChange(index, 'name', selectedOption.value)\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div className=\"remove-narrator-button-verse\">\r\n                <img\r\n                  src={require('../../assets/remove.png')} // Updated image path\r\n                  alt=\"Remove Narrator\"\r\n                  className=\"remove-image-verse\"\r\n                  onClick={() => handleRemoveNarrator(index)}\r\n                />\r\n              </div>\r\n              \r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"that-mentions\">\r\n          <div className=\"search-text\">That Mentions:</div>\r\n          <div className=\"dropdown\">\r\n            <label htmlFor=\"mentions\">Mentions</label>\r\n            <Select \r\n              options={filteredMentions}\r\n              inputValue={mentionsInputValue} \r\n              isSearchable={true} \r\n              onInputChange={handleMentionsInputChange}\r\n              onChange={handleMentionsChange} \r\n            />\r\n          </div>\r\n      </div>\r\n        <div className=\"run-query-button-verse\">\r\n          <button className=\"run-button\" onClick={SendDataToBackend}>\r\n            Run Query\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"limit-results-box-verse\">\r\n          <label htmlFor=\"limit-results\">Limit Search Results</label>\r\n          <div className=\"limit-input-verse\">\r\n            <button className=\"decrement-verse\" onClick={decrementValue}>-</button>\r\n            <input\r\n              type=\"number\"\r\n              id=\"limit-results\"\r\n              value={limitValue}\r\n              onChange={(e) => setLimitValue(Math.max(0, parseInt(e.target.value)))}\r\n            />\r\n            <button className=\"increment-verse\" onClick={incrementValue}>+</button>\r\n          </div>\r\n      </div>\r\n      {loading && (\r\n      <div className=\"loader-container3\">\r\n        <Loader type=\"Oval\" color=\"#4639E3\" height={40} width={40} />\r\n      </div>\r\n    )}\r\n\r\n    </div>\r\n\r\n    <div className='Footer-portion'>\r\n        <Footer />\r\n    </div>\r\n    \r\n  </div>\r\n  );\r\n};\r\n\r\nexport default VerseQueryBuilder;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\CommentaryQueryBuilder\\CommentaryQueryBuilder.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Chain\\Chain.js",["191","192","193"],[],"// Chain.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport './Chain.css';\r\n\r\nconst Chain = () => {\r\n  const location = useLocation();\r\n  console.log(\"I am here Location \", location.state); // Log location.state here\r\n\r\n  const resultsData = location.state ? location.state.resultsData : null;\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [displayText, setDisplayText] = useState('Dummy Text');\r\n\r\n  const [uniqueNarratorNames, setUniqueNarratorNames] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  const narrators = [\r\n    { name: 'Narrator A' },\r\n    { name: 'Narrator B' },\r\n    { name: 'Narrator C' },\r\n    { name: 'Narrator D' },\r\n    { name: 'Narrator E' },\r\n    { name: 'Narrator F' },\r\n    { name: 'Narrator G' },\r\n    { name: 'Narrator H' },\r\n    { name: 'Narrator I' },\r\n    { name: 'Narrator J' },\r\n    { name: 'Narrator K' },\r\n    { name: 'Narrator L' },\r\n    { name: 'Narrator M' },\r\n    { name: 'Narrator N' },\r\n    // Add more narrators as needed\r\n  ];\r\n\r\n  const calculateLinePositions = () => {\r\n    const container = document.querySelector('.chain-container');\r\n\r\n    if (!container) {\r\n      return; // Exit if container is null\r\n    }\r\n\r\n    const links = document.querySelectorAll('.link-line');\r\n\r\n    // Check if links NodeList is empty\r\n    if (!links.length) {\r\n      return;\r\n    }\r\n\r\n    const containerRect = container.getBoundingClientRect();\r\n\r\n    narrators.forEach((narrator, index) => {\r\n      const block = document.getElementById(`narrator-block-${index}`);\r\n      if (!block) {\r\n        return; // Exit if block is null\r\n      }\r\n\r\n      const blockRect = block.getBoundingClientRect();\r\n\r\n      const link = links[index];\r\n\r\n      // Calculate top and height based on the position of the next block\r\n      const nextBlock = document.getElementById(`narrator-block-${index + 1}`);\r\n      const nextBlockRect = nextBlock ? nextBlock.getBoundingClientRect() : null;\r\n\r\n      const top = blockRect.bottom;\r\n      const height = nextBlockRect ? nextBlockRect.top - blockRect.top : 0;\r\n\r\n      link.style.top = `${top}px`;\r\n      link.style.height = `${height}px`;\r\n    });\r\n  };\r\n\r\n  console.log(\"RESULTS DATA:\", resultsData); // Log the resultsData here\r\n\r\n  useEffect(() => {\r\n    if (\r\n      resultsData &&\r\n      resultsData.result &&\r\n      resultsData.result.results &&\r\n      resultsData.result.results.bindings\r\n    ) {\r\n      const textValue = resultsData.result.results.bindings[0].Text.value;\r\n      const rootNarrator = resultsData.result.results.bindings[0]?.RootNarrator.value;\r\n      setDisplayText(parseDisplayText(textValue, uniqueNarratorNames, rootNarrator));\r\n    }\r\n  }, [resultsData, uniqueNarratorNames]);\r\n  \r\nuseEffect(() => {\r\n    const uniqueNames = resultsData && resultsData.result && resultsData.result.results &&\r\n      Array.from(new Set(\r\n        resultsData.result.results.bindings.map(\r\n          (binding) => binding.NarratorName.value\r\n        )\r\n      ));\r\n    setUniqueNarratorNames(uniqueNames);\r\n  }, [resultsData]);\r\n\r\n  useEffect(() => {\r\n    calculateLinePositions();\r\n    window.addEventListener('resize', calculateLinePositions);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', calculateLinePositions);\r\n    };\r\n  }, [isExpanded]);\r\n  \r\n\r\n  const handleNarratorNameClick = (Refer) => {\r\n    // Define the action when narrator name is clicked\r\n    console.log(\"Narrator Name clicked:\", Refer);\r\n    navigate('/people-page', { state: { Refer} });\r\n  };\r\n\r\n  const parseDisplayText = (text, uniqueNarratorNames, rootNarrator) => {\r\n    if (!text || !uniqueNarratorNames || uniqueNarratorNames.length === 0) return text;\r\n  \r\n    const textWithClickableNames = [];\r\n    let currentIndex = 0;\r\n  \r\n    const allNames = [...uniqueNarratorNames, rootNarrator];\r\n  \r\n    allNames.forEach(name => {\r\n      const index = text.indexOf(name, currentIndex);\r\n      if (index !== -1) {\r\n        textWithClickableNames.push(text.substring(currentIndex, index));\r\n  \r\n        textWithClickableNames.push(\r\n          <span className=\"narrator-name-Chain\" onClick={() => handleNarratorNameClick(name)}>\r\n            {name}\r\n          </span>\r\n        );\r\n  \r\n        currentIndex = index + name.length;\r\n      }\r\n    });\r\n  \r\n    textWithClickableNames.push(text.substring(currentIndex));\r\n  \r\n    return textWithClickableNames;\r\n  };\r\n  \r\n  return (\r\n  <div className={`hadith-query-results-chain ${isExpanded ? 'expanded' : ''}`}>\r\n    <div className=\"back-button-HQR\" onClick={() => window.history.back()}>\r\n      <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n    </div>\r\n    <button className=\"show-chain-button\" onClick={toggleExpand}>\r\n      {isExpanded ? 'Hide Chain' : 'Show Chain'}\r\n    </button>\r\n    <div className={`query-text-box-chain ${isExpanded ? 'expanded' : ''}`}>\r\n      <p>{displayText}</p>\r\n    </div>\r\n\r\n    {isExpanded && narrators && narrators.length > 0 && (\r\n      <div className=\"details-chain\">\r\n        <div className=\"chain-container\">\r\n          <div className=\"container-with-stroke\">\r\n            {narrators.map((narrator, index) => {\r\n              let narratorValue;\r\n\r\n              if (index === 0) {\r\n                // Display RootNarrator in the first block\r\n                narratorValue = resultsData.result.results.bindings[0]?.RootNarrator.value;\r\n              } else {\r\n                // Extract unique NarratorName values for subsequent blocks\r\n                const uniqueNarratorNames = Array.from(\r\n                  new Set(\r\n                    resultsData &&\r\n                      resultsData.result &&\r\n                      resultsData.result.results &&\r\n                      resultsData.result.results.bindings &&\r\n                      resultsData.result.results.bindings.map(\r\n                        (binding) => binding.NarratorName.value\r\n                      )\r\n                  )\r\n                );\r\n\r\n                // Get NarratorName value for the current index if available\r\n                narratorValue = uniqueNarratorNames[index - 1] || null; // Subtract 1 to account for RootNarrator\r\n              }\r\n\r\n              // Render the block only if narratorValue exists\r\n              return narratorValue && (\r\n                <div key={index} className=\"narrator-block\" id={`narrator-block-${index}`}>\r\n                  <p>{narratorValue}</p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"chain-links\">\r\n          {narrators.length > 1 &&\r\n            narrators.map((_, index) => (\r\n              index < narrators.length - 1 && (\r\n                <div key={index} className=\"link-line\"></div>\r\n              )\r\n            ))}\r\n        </div>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n};\r\n\r\nexport default Chain;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\FAQResults\\FAQResults.js",["194"],[],"import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './FAQResults.css';\r\nimport Footer from '../Footer/Footer'; // Import Footer component\r\n\r\nconst FAQResults = () => {\r\n  const location = useLocation();\r\n  const { resultsData } = location.state || {};\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [sortOrder, setSortOrder] = useState('asc'); // Initial sort order\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  const handleSort = (field) => {\r\n    if (sortOrder === 'asc') {\r\n      resultsData?.sort((a, b) => a[field]?.value.localeCompare(b[field]?.value));\r\n      setSortOrder('desc');\r\n    } else {\r\n      resultsData?.sort((a, b) => b[field]?.value.localeCompare(a[field]?.value));\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const renderTableData = () => {\r\n    return (\r\n      resultsData &&\r\n      resultsData.map((data, index) => (\r\n        <tr key={index}>\r\n          <td>{data.Text ? data.Text.value : '-'}</td>\r\n          <td>{data.chapter ? data.chapter.value : '-'}</td>\r\n          <td>{data.Verseno ? data.Verseno.value : '-'}</td>\r\n          <td>{data.Surahname ? data.Surahname.value : '-'}</td>\r\n        </tr>\r\n      ))\r\n    );\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div className={`verse-query-results ${isExpanded ? 'expanded' : ''}`}>\r\n        <div className=\"back-button-FAQ\" onClick={() => window.history.back()}>\r\n          <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n        </div>\r\n        <div className={`query-text-box ${isExpanded ? 'expanded' : ''}`}>\r\n          <div className=\"details-swipe-bar\" onClick={toggleExpand}>\r\n            <div className={`arrow ${isExpanded ? 'expanded' : ''}`}></div>\r\n          </div>\r\n        </div>\r\n\r\n        {isExpanded && resultsData && resultsData.length > 0 && (\r\n        <div className=\"details-table-FAQ\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Text</th>\r\n                <th>Chapter</th>\r\n                <th>Verse Number</th>\r\n                <th>Surah Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{renderTableData()}</tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      </div>\r\n      <div className=\"Footer-portion-FAQ\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FAQResults;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\People\\People.js",["195","196","197"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Oval as Loader } from 'react-loader-spinner';\r\nimport './People.css';\r\nimport Footer from '../Footer/Footer';\r\nimport Select from 'react-select'; // Import the Select component\r\n\r\nconst People = () => {\r\n  const location = useLocation();\r\n  const { Refer } = location.state || {}; // Retrieve the Refer value from location state\r\n\r\n  const [selectedValue, setSelectedValue] = useState('');\r\n  const [showTable, setShowTable] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [mentionOptions, setMentionOptions] = useState([]);\r\n  const [filteredMentions, setFilteredMentions] = useState([]);\r\n\r\n  const [currentTableData, setCurrentTableData] = useState([]);\r\n\r\n  const [tableStack, setTableStack] = useState([]); // Stack to store table data\r\n\r\n  useEffect(() => {\r\n    if (Refer) {\r\n      // Set the selected value to the Refer value if available\r\n      setSelectedValue({ value: Refer, label: Refer });\r\n      // Invoke query_federated with the Refer value\r\n      // fetchData(Refer);\r\n    }\r\n  }, [Refer]);\r\n\r\n  // State to track the expansion status of each cell\r\n  const [isExpanded, setIsExpanded] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setIsExpanded(new Array(tableData.length).fill(false));\r\n  }, [tableData]);\r\n\r\n  const handleExpansion = (index) => {\r\n    const expanded = [...isExpanded];\r\n    expanded[index] = !expanded[index];\r\n    setIsExpanded(expanded);\r\n  };\r\n\r\n \r\n  const renderTableData = () => {\r\n    return (\r\n      <tbody>\r\n        {tableData.map((data, rowIndex) => (\r\n          <React.Fragment key={rowIndex}>\r\n            {/* Abstract */}\r\n            {data.abstract && (\r\n              <tr>\r\n                <th>Abstract</th>\r\n                <td>\r\n                  {isExpanded[rowIndex] || data.abstract.length <= 100\r\n                    ? data.abstract\r\n                    : `${data.abstract.slice(0, 500)}...`}\r\n                  {data.abstract.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n  \r\n            {/* Death */}\r\n            {data.death && (\r\n              <tr>\r\n                <th>Death</th>\r\n                <td>\r\n                  {isExpanded[rowIndex] || data.death.length <= 100\r\n                    ? data.death\r\n                    : `${data.death.slice(0, 100)}...`}\r\n                  {data.death.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n  \r\n            {/* Children */}\r\n            {data.concatenatedChildren && (\r\n              <tr>\r\n                <th>Children</th>\r\n                <td>\r\n                  <ul>\r\n                    {isExpanded[rowIndex] || data.concatenatedChildren.length <= 100 ? (\r\n                      renderClickableListItems(data.concatenatedChildren)\r\n                    ) : (\r\n                      renderClickableListItems(data.concatenatedChildren.slice(0, 100))\r\n                    )}\r\n                  </ul>\r\n                  {data.concatenatedChildren.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n  \r\n            {/* Parents */}\r\n            {data.concatenatedParents && (\r\n              <tr>\r\n                <th>Parents</th>\r\n                <td>\r\n                  <ul>\r\n                    {isExpanded[rowIndex] || data.concatenatedParents.length <= 100 ? (\r\n                      renderClickableListItems(data.concatenatedParents)\r\n                    ) : (\r\n                      renderClickableListItems(data.concatenatedParents.slice(0, 100))\r\n                    )}\r\n                  </ul>\r\n                  {data.concatenatedParents.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n  \r\n            {/* Relatives */}\r\n            {data.concatenatedRelatives && (\r\n              <tr>\r\n                <th>Relatives</th>\r\n                <td>\r\n                  <ul>\r\n                    {isExpanded[rowIndex] || data.concatenatedRelatives.length <= 100 ? (\r\n                      renderClickableListItems(data.concatenatedRelatives)\r\n                    ) : (\r\n                      renderClickableListItems(data.concatenatedRelatives.slice(0, 100))\r\n                    )}\r\n                  </ul>\r\n                  {data.concatenatedRelatives.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n\r\n\r\n            {/* Wiki Links */}\r\n            {data.concatenatedData && (\r\n              <tr>\r\n                <th>Wiki Links</th>\r\n                <td>\r\n                  <ul>\r\n                    {isExpanded[rowIndex] || data.concatenatedData.length <= 100 ? (\r\n                      renderClickableListItems(data.concatenatedData)\r\n                    ) : (\r\n                      renderClickableListItems(data.concatenatedData.slice(0, 100))\r\n                    )}\r\n                  </ul>\r\n                  {data.concatenatedData.length > 100 && (\r\n                    <button\r\n                      className=\"view-more-button\"\r\n                      onClick={() => handleExpansion(rowIndex)}\r\n                    >\r\n                      {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )}\r\n\r\n          </React.Fragment>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  const handleInputChange = (selectedOption) => {\r\n    setSelectedValue(selectedOption);\r\n  };\r\n\r\n  const handleRenderTable = () => {\r\n    if (selectedValue) {\r\n      setLoading(true);\r\n      fetchData(selectedValue.value);\r\n    }\r\n  };\r\n\r\n  const fetchData = async (selectedName) => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/api/query_federated/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ person: selectedName }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Backend Response:', data);\r\n\r\n        if (data && data.result && data.result.results && Array.isArray(data.result.results.bindings)) {\r\n          setTableStack([...tableStack, renderTableData]); // Push current table data to stack\r\n\r\n          setTableData(\r\n            data.result.results.bindings.map(item => ({\r\n              abstract: item.abstract?.value || '',\r\n              death: item.death?.value || '',\r\n              concatenatedData: item.concatenatedData?.value || '',\r\n              concatenatedQuotes: item.concatenatedQuotes?.value || '',\r\n              concatenatedChildren: item.concatenatedChildren?.value || '',\r\n              concatenatedParents: item.concatenatedParents?.value || '',\r\n              concatenatedRelatives: item.concatenatedRelatives?.value || ''\r\n            }))\r\n          );\r\n\r\n          setShowTable(true);\r\n        } else {\r\n          console.error('Invalid backend response:', data);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('/Drop-down-data/Hadith Dropdowns/Mentions Hadith.txt')\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        const lines = data.split('\\n');\r\n        const mentionedPersons = lines.slice(1).map((line) => {\r\n          const fullName = line.trim();\r\n          return { value: fullName, label: fullName };\r\n        });\r\n        setMentionOptions(mentionedPersons);\r\n        setFilteredMentions(mentionedPersons.slice(0, 8));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching mentioned persons:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleMentionsInputChange = (inputValue) => {\r\n    const filteredOptions = mentionOptions.filter(option =>\r\n      option.label.toLowerCase().includes(inputValue.toLowerCase())\r\n    );\r\n    setFilteredMentions(filteredOptions);\r\n  };\r\n  \r\n  const handleLinkClick = async (clickedLink) => {\r\n    try {\r\n      // Scroll to the top of the page\r\n      window.scrollTo({\r\n        top: 0,\r\n        behavior: 'smooth' // You can change this to 'auto' if you don't want smooth scrolling\r\n      });\r\n  \r\n      setLoading(true);\r\n      const formattedLink = clickedLink.trim(); // Remove leading and trailing spaces\r\n  \r\n      const response = await fetch('http://127.0.0.1:8000/api/query_federated2/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ information: formattedLink }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Backend Response:', data);\r\n  \r\n        if (data && data.result && data.result.results && Array.isArray(data.result.results.bindings)) {\r\n          setTableStack([...tableStack, currentTableData]); // Push current table data to stack\r\n\r\n          setCurrentTableData(\r\n            data.result.results.bindings.map(item => ({\r\n              abstract: item.abstract?.value || '',\r\n              death: item.death?.value || '',\r\n              concatenatedData: item.concatenatedData?.value || '',\r\n              concatenatedQuotes: item.concatenatedQuotes?.value || '',\r\n              concatenatedChildren: item.concatenatedChildren?.value || '',\r\n              concatenatedParents: item.concatenatedParents?.value || '',\r\n              concatenatedRelatives: item.concatenatedRelatives?.value || ''\r\n            }))\r\n          );\r\n  \r\n          setShowTable(true);\r\n  \r\n        } else {\r\n          console.error('Invalid backend response:', data);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleBackToPrevious = () => {\r\n    const previousTable = tableStack.pop(); // Pop the previous table from stack\r\n    if (previousTable) {\r\n      setCurrentTableData(previousTable);\r\n    }\r\n  };\r\n\r\n\r\n  const renderClickableLink = (item) => {\r\n    // Check if the item contains \"http://dbpedia.org/\"\r\n    const dbpediaIndex = item.indexOf('http://dbpedia.org/');\r\n    const isClickable = dbpediaIndex !== -1;\r\n  \r\n    if (isClickable) {\r\n      // Check if the link contains \"/resource/\" after \"http://dbpedia.org/\"\r\n      const resourceIndex = item.indexOf('/resource/', dbpediaIndex);\r\n      if (resourceIndex !== -1) {\r\n        // If \"/resource/\" is found, render the link normally\r\n        const resourceName = item.substring(resourceIndex + '/resource/'.length);\r\n        return (\r\n          <a\r\n            href=\"#\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleLinkClick(item);\r\n            }}\r\n            className=\"clickable-link\"\r\n          >\r\n            {resourceName}\r\n          </a>\r\n        );\r\n      } else {\r\n        // If \"/resource/\" is not found, render the entire link as plain text\r\n        const endIndex = item.indexOf(' ', dbpediaIndex); // Find the end of the link\r\n        const truncatedLink = item.substring(dbpediaIndex, endIndex); // Extract the truncated link\r\n        return (\r\n          <a\r\n            href=\"#\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleLinkClick(item);\r\n            }}\r\n            className=\"clickable-link\"\r\n          >\r\n            {truncatedLink}\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n  \r\n    // If the item is not a valid link, render it as plain text\r\n    return <span>{item}</span>;\r\n  };\r\n  \r\n  \r\n// Function to render clickable list items without extra empty <li> elements\r\nconst renderClickableListItems = (list) => {\r\n  return list\r\n    .split('\\n')\r\n    .filter((item) => item.trim() !== '') // Filter out empty items\r\n    .map((item, index) => (\r\n      <li key={index}>{renderClickableLink(item)}</li>\r\n    ));\r\n};\r\n\r\n    return (\r\n    <div>\r\n      <div className=\"back-button-P\" onClick={() => window.history.back()}>\r\n        <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n      </div>\r\n      <div className={`query-text-box-P`}>\r\n        <Select\r\n          options={filteredMentions}\r\n          value={selectedValue}\r\n          onChange={handleInputChange}\r\n          onInputChange={handleMentionsInputChange}\r\n          isSearchable\r\n          placeholder=\"Select or type to search...\"\r\n          className='custom-select'\r\n        />\r\n        <button onClick={handleRenderTable}>Learn About the Entity</button>\r\n      </div>\r\n\r\n      {loading && (\r\n        <div className=\"loader-container\">\r\n          <Loader type=\"Oval\" color=\"#4639E3\" height={40} width={40} />\r\n        </div>\r\n      )}\r\n\r\n      {!loading && currentTableData.length > 0 && showTable  &&  (\r\n        <div className=\"details-table-P\">\r\n          <button onClick={handleBackToPrevious} className=\"button-back\">Back to Previous Results</button>\r\n\r\n          <table>\r\n            <tbody>\r\n            {currentTableData.map((data, rowIndex) => (\r\n        <React.Fragment key={rowIndex}>\r\n          {data.abstract && (\r\n            <tr>\r\n              <th>Abstract</th>\r\n              <td>{data.abstract}</td>\r\n            </tr>\r\n          )}\r\n\r\n\r\n          {data.concatenatedChildren && (\r\n            <tr>\r\n              <th>Children</th>\r\n              <td>\r\n                <ul>\r\n                  {isExpanded[rowIndex] || data.concatenatedChildren.length <= 100 ? (\r\n                    renderClickableListItems(data.concatenatedChildren)\r\n                  ) : (\r\n                    renderClickableListItems(data.concatenatedChildren.slice(0, 100))\r\n                  )}\r\n                </ul>\r\n                {data.concatenatedChildren.length > 100 && (\r\n                  <button\r\n                    className=\"view-more-button\"\r\n                    onClick={() => handleExpansion(rowIndex)}\r\n                  >\r\n                    {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n\r\n          {data.concatenatedParents && (\r\n            <tr>\r\n              <th>Parents</th>\r\n              <td>\r\n                <ul>\r\n                  {isExpanded[rowIndex] || data.concatenatedParents.length <= 100 ? (\r\n                    renderClickableListItems(data.concatenatedParents)\r\n                  ) : (\r\n                    renderClickableListItems(data.concatenatedParents.slice(0, 100))\r\n                  )}\r\n                </ul>\r\n                {data.concatenatedParents.length > 100 && (\r\n                  <button\r\n                    className=\"view-more-button\"\r\n                    onClick={() => handleExpansion(rowIndex)}\r\n                  >\r\n                    {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n\r\n          {data.concatenatedRelatives && (\r\n            <tr>\r\n              <th>Relatives</th>\r\n              <td>\r\n                <ul>\r\n                  {isExpanded[rowIndex] || data.concatenatedRelatives.length <= 100 ? (\r\n                    renderClickableListItems(data.concatenatedRelatives)\r\n                  ) : (\r\n                    renderClickableListItems(data.concatenatedRelatives.slice(0, 100))\r\n                  )}\r\n                </ul>\r\n                {data.concatenatedRelatives.length > 100 && (\r\n                  <button\r\n                    className=\"view-more-button\"\r\n                    onClick={() => handleExpansion(rowIndex)}\r\n                  >\r\n                    {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n\r\n\r\n          {data.concatenatedData && (\r\n            <tr>\r\n              <th>Wiki Links</th>\r\n              <td>\r\n                <ul>\r\n                  {isExpanded[rowIndex] || data.concatenatedData.length <= 100 ? (\r\n                    renderClickableListItems(data.concatenatedData)\r\n                  ) : (\r\n                    renderClickableListItems(data.concatenatedData.slice(0, 100))\r\n                  )}\r\n                </ul>\r\n                {data.concatenatedData.length > 100 && (\r\n                  <button\r\n                    className=\"view-more-button\"\r\n                    onClick={() => handleExpansion(rowIndex)}\r\n                  >\r\n                    {isExpanded[rowIndex] ? 'View less' : 'View more'}\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          )}\r\n\r\n        </React.Fragment>\r\n      ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {!loading && !currentTableData.length && showTable && (\r\n        <div className=\"details-table-P\">\r\n          <table>\r\n            {renderTableData()}\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default People;\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Tafseer\\Tafseer.js",["198"],[],"import React, { useState, useEffect } from 'react';\r\nimport './Tafseer.css';\r\nimport Spinner from '../Spinner/Spinner'; // Import Spinner component\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst XMLRenderer = () => {\r\n  const navigate = useNavigate(); // Declare navigate using useNavigate hook\r\n  const [folders, setFolders] = useState([]);\r\n  const [selectedFolder, setSelectedFolder] = useState(localStorage.getItem('selectedFolder') || '');\r\n  const [files, setFiles] = useState([]);\r\n  const [selectedFile, setSelectedFile] = useState(localStorage.getItem('selectedFile') || '');\r\n  const [xmlData, setXmlData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [fileIndex, setFileIndex] = useState(0);\r\n  const [enlargedView, setEnlargedView] = useState(false);\r\n  const [showButton, setShowButton] = useState(false);\r\n\r\n  // Define the file mapping object\r\n  const fileMapping = {\r\n    \"sure_0_section.xml\": \"S000A MuqadimaA\",\r\n    \"sure_1_section_0.11-0.16.xml\": \"S001M - Part 1\",\r\n    \"sure_1_section_1.1-1.14.xml\": \"S001M - Part 2\",\r\n    \"sure_2_section_2.1-2.42.xml\": \"S002A - Part 1\",\r\n    \"sure_2_section_2.113-2.165.xml\": \"S002A - Part 2\",\r\n    \"sure_2_section_2.166-2.210.xml\": \"S002A - Part 3\",\r\n    \"sure_2_section_2.211-2.263.xml\": \"S002A - Part 4\",\r\n    \"sure_2_section_2.264-2.297.xml\": \"S002A - Part 5\",\r\n    \"sure_2_section_2.298-2.344.xml\": \"S002A - Part 6\",\r\n    \"sure_2_section_2.345-2.395.xml\": \"S002A - Part 7\",\r\n    \"sure_2_section_2.396-2.439.xml\": \"S002A - Part 8\",\r\n    \"sure_2_section_2.43-2.77.xml\": \"S002A - Part 9\",\r\n    \"sure_2_section_2.440-2.482.xml\": \"S002A - Part 10\",\r\n    \"sure_2_section_2.483-2.498.xml\": \"S002A - Part 11\",\r\n    \"sure_2_section_2.499-2.523.xml\": \"S002A - Part 12\",\r\n    \"sure_2_section_2.524-2.532.xml\": \"S002A - Part 13\",\r\n    \"sure_2_section_2.533-2.548.xml\": \"S002A - Part 14\",\r\n    \"sure_2_section_2.549-2.582.xml\": \"S002A - Part 15\",\r\n    \"sure_2_section_2.583-2.613.xml\": \"S002A - Part 16\",\r\n    \"sure_2_section_2.614-2.626.xml\": \"S002A - Part 17\",\r\n    \"sure_2_section_2.627-2.648.xml\": \"S002A - Part 18\",\r\n    \"sure_2_section_2.649-2.672.xml\": \"S002A - Part 19\",\r\n    \"sure_2_section_2.673-2.685.xml\": \"S002A - Part 20\",\r\n    \"sure_2_section_2.686-2.717.xml\": \"S002A - Part 21\",\r\n    \"sure_2_section_2.718-2.750.xml\": \"S002A - Part 22\",\r\n    \"sure_2_section_2.751-2.797.xml\": \"S002A - Part 23\",\r\n    \"sure_2_section_2.78-2.112.xml\": \"S002A - Part 24\",\r\n    \"sure_2_section_2.798-2.830.xml\": \"S002A - Part 25\",\r\n    \"sure_3_section_3.1-3.48.xml\": \"S003A - Part 1\",\r\n    \"sure_3_section_3.139-3.171.xml\": \"S003A - Part 2\",\r\n    \"sure_3_section_3.172-3.210.xml\": \"S003A - Part 3\",\r\n    \"sure_3_section_3.211-3.249.xml\": \"S003A - Part 4\",\r\n    \"sure_3_section_3.250-3.290.xml\": \"S003A - Part 5\",\r\n    \"sure_3_section_3.291-3.301.xml\": \"S003A - Part 6\",\r\n    \"sure_3_section_3.49-3.95.xml\": \"S003A - Part 7\",\r\n    \"sure_3_section_3.96-3.138.xml\": \"S003A - Part 8\",\r\n    \"sure_4_section_4.1-4.27.xml\": \"S004N - Part 1\",\r\n    \"sure_4_section_4.115-4.148.xml\": \"S004N - Part 2\",\r\n    \"sure_4_section_4.149-4.197.xml\": \"S004N - Part 3\",\r\n    \"sure_4_section_4.198-4.208.xml\": \"S004N - Part 4\",\r\n    \"sure_4_section_4.209-4.241.xml\": \"S004N - Part 5\",\r\n    \"sure_4_section_4.242-4.277.xml\": \"S004N - Part 6\",\r\n    \"sure_4_section_4.278-4.302.xml\": \"S004N - Part 7\",\r\n    \"sure_4_section_4.28-4.57.xml\": \"S004N - Part 8\",\r\n    \"sure_4_section_4.58-4.84.xml\": \"S004N - Part 9\",\r\n    \"sure_4_section_4.85-4.114.xml\": \"S004N - Part 10\",\r\n    \"sure_5_section_5.1-5.35.xml\": \"S005Cat NER MA - Part 1\",\r\n    \"sure_5_section_5.106-5.125.xml\": \"S005Cat NER MA - Part 2\",\r\n    \"sure_5_section_5.126-5.137.xml\": \"S005Cat NER MA - Part 3\",\r\n    \"sure_5_section_5.138-5.178.xml\": \"S005Cat NER MA - Part 4\",\r\n    \"sure_5_section_5.179-5.205.xml\": \"S005Cat NER MA - Part 5\",\r\n    \"sure_5_section_5.206-5.224.xml\": \"S005Cat NER MA - Part 6\",\r\n    \"sure_5_section_5.225-5.256.xml\": \"S005Cat NER MA - Part 7\",\r\n    \"sure_5_section_5.36-5.52.xml\": \"S005Cat NER MA - Part 8\",\r\n    \"sure_5_section_5.53-5.105.xml\": \"S005Cat NER MA - Part 9\",\r\n    \"sure_6_section_6.1-6.63.xml\": \"S006N - Part 1\",\r\n    \"sure_6_section_6.101-6.144.xml\": \"S006N - Part 2\",\r\n    \"sure_6_section_6.145-6.199.xml\": \"S006N - Part 3\",\r\n    \"sure_6_section_6.200-6.234.xml\": \"S006N - Part 4\",\r\n    \"sure_6_section_6.235-6.241.xml\": \"S006N - Part 5\",\r\n    \"sure_6_section_6.64-6.100.xml\": \"S006N - Part 6\",\r\n    \"sure_7_section_7.1-7.48.xml\": \"S007A - Part 1\",\r\n    \"sure_7_section_7.151-7.191.xml\": \"S007A - Part 2\",\r\n    \"sure_7_section_7.192-7.232.xml\": \"S007A - Part 3\",\r\n    \"sure_7_section_7.233-7.235.xml\": \"S007A - Part 4\",\r\n    \"sure_7_section_7.49-7.89.xml\": \"S007A - Part 5\",\r\n    \"sure_7_section_7.90-7.150.xml\": \"S007A - Part 6\",\r\n    \"sure_8_section_8.1-8.26.xml\": \"S008CatA - Part 1\",\r\n    \"sure_8_section_8.27-8.56.xml\": \"S008CatA - Part 2\",\r\n    \"sure_8_section_8.57-8.83.xml\": \"S008CatA - Part 3\",\r\n    \"sure_9_section_9.1-9.28.xml\": \"S009CatA - Part 1\",\r\n    \"sure_9_section_9.116-9.131.xml\": \"S009CatA - Part 2\",\r\n    \"sure_9_section_9.29-9.62.xml\": \"S009CatA - Part 3\",\r\n    \"sure_9_section_9.63-9.92.xml\": \"S009CatA - Part 4\",\r\n    \"sure_9_section_9.93-9.115.xml\": \"S009CatA - Part 5\",\r\n    \"sure_10_section_10.1-10.68.xml\": \"S010M - Part 1\",\r\n    \"sure_10_section_10.69-10.108.xml\": \"S010M - Part 2\",\r\n    \"sure_11_section_11.1-11.42.xml\": \"S011CatA - Part 1\",\r\n    \"sure_11_section_11.43-11.81.xml\": \"S011CatA - Part 2\",\r\n    \"sure_11_section_11.82-11.112.xml\": \"S011CatA - Part 3\",\r\n    \"sure_12_section_12.1-12.22.xml\": \"S012CatA - Part 1\",\r\n    \"sure_12_section_12.23-12.60.xml\": \"S012CatA - Part 2\",\r\n    \"sure_12_section_12.61-12.84.xml\": \"S012CatA - Part 3\",\r\n    \"sure_12_section_12.85-12.91.xml\": \"S012CatA - Part 4\",\r\n    \"sure_13_section_13.1-13.21.xml\": \"S013M - Part 1\",\r\n    \"sure_13_section_13.22-13.39.xml\": \"S013M - Part 2\",\r\n    \"sure_14_section_14.1-14.34.xml\": \"S014M - Part 1\",\r\n    \"sure_14_section_14.35-14.44.xml\": \"S014M - Part 2\",\r\n    \"sure_15_section_15.1-15.44.xml\": \"S015M - Part 1\",\r\n    \"sure_15_section_15.45-15.51.xml\": \"S015M - Part 2\",\r\n    \"sure_16_section_16.1-16.61.xml\": \"S016A - Part 1\",\r\n    \"sure_16_section_16.112-16.112.xml\": \"S016A - Part 2\",\r\n    \"sure_16_section_16.62-16.111.xml\": \"S016A - Part 3\",\r\n    \"sure_17_section_17.1-17.13.xml\": \"S017N - Part 1\",\r\n    \"sure_17_section_17.14-17.53.xml\": \"S017N - Part 2\",\r\n    \"sure_17_section_17.54-17.86.xml\": \"S017N - Part 3\",\r\n    \"sure_17_section_17.87-17.102.xml\": \"S017N - Part 4\",\r\n    \"sure_18_section_18.1-18.26.xml\": \"S018CatA - Part 1\",\r\n    \"sure_18_section_18.27-18.64.xml\": \"S018CatA - Part 2\",\r\n    \"sure_18_section_18.65-18.77.xml\": \"S018CatA - Part 3\",\r\n    \"sure_19_section_19.1-19.38.xml\": \"S019N - Part 1\",\r\n    \"sure_19_section_19.39-19.67.xml\": \"S019N - Part 2\",\r\n    \"sure_20_section_20.1-20.42.xml\": \"S020CatA - Part 1\",\r\n    \"sure_20_section_20.43-20.71.xml\": \"S020CatA - Part 2\",\r\n    \"sure_21_section_21.1-21.61.xml\": \"S021CatA - Part 1\",\r\n    \"sure_21_section_21.62-21.85.xml\": \"S021CatA - Part 2\",\r\n    \"sure_22_section_22.1-22.27.xml\": \"S022CatA - Part 1\",\r\n    \"sure_22_section_22.28-22.63.xml\": \"S022CatA - Part 2\",\r\n    \"sure_23_section_23.1-23.67.xml\": \"S023CatN - Part 1\",\r\n    \"sure_24_section_24.1-24.27.xml\": \"S024CatA - Part 1\",\r\n    \"sure_24_section_24.28-24.52.xml\": \"S024CatA - Part 2\",\r\n    \"sure_24_section_24.53-24.55.xml\": \"S024CatA - Part 3\",\r\n    \"sure_25_section_25.1-25.46.xml\": \"S025N - Part 1\",\r\n    \"sure_25_section_25.47-25.52.xml\": \"S025N - Part 2\",\r\n    \"sure_26_section_26.1-26.67.xml\": \"S026N - Part 1\",\r\n    \"sure_26_section_26.68-26.69.xml\": \"S026N - Part 2\",\r\n    \"sure_27_section_27.1-27.50.xml\": \"S027N - Part 1\",\r\n    \"sure_27_section_27.51-27.56.xml\": \"S027N - Part 2\",\r\n    \"sure_28_section_28.1-28.38.xml\": \"S028N - Part 1\",\r\n    \"sure_28_section_28.39-28.73.xml\": \"S028N - Part 2\",\r\n    \"sure_29_section_29.1-29.60.xml\": \"S029M - Part 1\",\r\n    \"sure_30_section_30.1-30.50.xml\": \"S030M - Part 1\",\r\n    \"sure_31_section_31.1-31.28.xml\": \"S031M - Part 1\",\r\n    \"sure_32_section_32.1-32.21.xml\": \"S032M - Part 1\",\r\n    \"sure_33_section_33.1-33.26.xml\": \"S033N - Part 1\",\r\n    \"sure_33_section_33.27-33.51.xml\": \"S033N - Part 2\",\r\n    \"sure_34_section_34.1-34.45.xml\": \"S034N - Part 1\",\r\n    \"sure_35_section_35.1-35.31.xml\": \"S035N - Part 1\",\r\n    \"sure_36_section_36.1-36.39.xml\": \"S036N - Part 1\",\r\n    \"sure_37_section_37.1-37.32.xml\": \"S037CatA - Part 1\",\r\n    \"sure_37_section_37.33-37.47.xml\": \"S037CatA - Part 2\",\r\n    \"sure_38_section_38.1-38.23.xml\": \"S038A - Part 1\",\r\n    \"sure_38_section_38.24-38.34.xml\": \"S038A - Part 2\",\r\n    \"sure_39_section_39.1-39.51.xml\": \"S039A - Part 1\",\r\n    \"sure_40_section_40.1-40.53.xml\": \"S040A - Part 1\",\r\n    \"sure_41_section_41.1-41.39.xml\": \"S041CatN - Part 1\",\r\n    \"sure_42_section_42.1-42.36.xml\": \"S042A - Part 1\",\r\n    \"sure_43_section_43.1-43.50.xml\": \"S043A - Part 1\",\r\n    \"sure_44_section_44.1-44.20.xml\": \"S044M - Part 1\",\r\n    \"sure_45_section_45.1-45.30.xml\": \"S045M - Part 1\",\r\n    \"sure_46_section_46.1-46.28.xml\": \"S046CatN - Part 1\",\r\n    \"sure_47_section_47.1-47.24.xml\": \"S047M - Part 1\",\r\n    \"sure_48_section_48.1-48.20.xml\": \"S048A - Part 1\",\r\n    \"sure_49_section_49.1-49.16.xml\": \"S049CatN - Part 1\",\r\n    \"sure_50_section_50.1-50.22.xml\": \"S050CatN - Part 1\",\r\n    \"sure_51_section_51.1-51.25.xml\": \"S051A - Part 1\",\r\n    \"sure_52_section_52.1-52.19.xml\": \"S052A - Part 1\",\r\n    \"sure_53_section_53.1-53.18.xml\": \"S053AN - Part 1\",\r\n    \"sure_54_section_54.1-54.20.xml\": \"S054A - Part 1\",\r\n    \"sure_55_section_55.1-55.20.xml\": \"S055N - Part 1\",\r\n    \"sure_56_section_56.1-56.20.xml\": \"S056N - Part 1\",\r\n    \"sure_57_section_57.1-57.23.xml\": \"S057N - Part 1\",\r\n    \"sure_58_section_58.1-58.20.xml\": \"S058N - Part 1\",\r\n    \"sure_59_section_59.1-59.17.xml\": \"S059N - Part 1\",\r\n    \"sure_60_section_60.1-60.12.xml\": \"S060A - Part 1\",\r\n    \"sure_61_section_61.1-61.10.xml\": \"S061M - Part 1\",\r\n    \"sure_62_section_62.1-62.10.xml\": \"S062M - Part 1\",\r\n    \"sure_63_section_63.1-63.10.xml\": \"S063CatM - Part 1\",\r\n    \"sure_64_section_64.1-64.14.xml\": \"S064M - Part 1\",\r\n    \"sure_65_section_65.1-65.8.xml\": \"S065A - Part 1\",\r\n    \"sure_66_section_66.1-66.12.xml\": \"S066A - Part 1\",\r\n    \"sure_67_section_67.1-67.19.xml\": \"S067M - Part 1\",\r\n    \"sure_68_section_68.1-68.19.xml\": \"S068N - Part 1\",\r\n    \"sure_69_section_69.1-69.13.xml\": \"S069N - Part 1\",\r\n    \"sure_70_section_70.1-70.11.xml\": \"S070N - Part 1\",\r\n    \"sure_71_section_71.1-71.9.xml\": \"S071M - Part 1\",\r\n    \"sure_72_section_72.1-72.11.xml\": \"S072CatN - Part 1\",\r\n    \"sure_73_section_73.1-73.8.xml\": \"S073N - Part 1\",\r\n    \"sure_74_section_74.1-74.10.xml\": \"S074N - Part 1\",\r\n    \"TT_s074_div010.xml\": \"S074N - Part 2\",\r\n    \"sure_75_section_75.1-75.8.xml\": \"S075N - Part 1\",\r\n    \"sure_76_section_76.1-76.14.xml\": \"S076M - Part 1\",\r\n    \"sure_77_section_77.1-77.10.xml\": \"S077N - Part 1\",\r\n    \"sure_78_section_78.1-78.9.xml\": \"S078N - Part 1\",\r\n    \"sure_79_section_79.1-79.9.xml\": \"S079N - Part 1\",\r\n    \"sure_80_section_80.1-80.6.xml\": \"S080M - Part 1\",\r\n    \"sure_81_section_81.1-81.6.xml\": \"S081M - Part 1\",\r\n    \"sure_82_section_82.1-82.4.xml\": \"S082M - Part 1\",\r\n    \"sure_83_section_83.1-83.9.xml\": \"S083M - Part 1\",\r\n    \"sure_84_section_84.1-84.5.xml\": \"S084M - Part 1\",\r\n    \"sure_85_section_85.1-85.6.xml\": \"S085CatM - Part 1\",\r\n    \"sure_86_section_86.1-86.2.xml\": \"S086M - Part 1\",\r\n    \"sure_87_section_87.1-87.3.xml\": \"S087M - Part 1\",\r\n    \"sure_88_section_88.1-88.4.xml\": \"S088M - Part 1\",\r\n    \"sure_89_section_89.1-89.6.xml\": \"S089CatN - Part 1\",\r\n    \"sure_90_section_90.1-90.3.xml\": \"S090A - Part 1\",\r\n    \"sure_91_section_91.1-91.2.xml\": \"S091M - Part 1\",\r\n    \"sure_92_section_92.1-92.3.xml\": \"S092CatM - Part 1\",\r\n    \"sure_93_section_93.1-93.2.xml\": \"S093M - Part 1\",\r\n    \"sure_94_section_94.1-94.1.xml\": \"S094M - Part 1\",\r\n    \"sure_95_section_95.1-95.2.xml\": \"S095M - Part 1\",\r\n    \"sure_96_section_96.1-96.5.xml\": \"S096M - Part 1\",\r\n    \"sure_97_section_97.1-97.1.xml\": \"S097M - Part 1\",\r\n    \"sure_98_section_98.1-98.4.xml\": \"S098M - Part 1\",\r\n    \"sure_99_section_99.1-99.1.xml\": \"S099M - Part 1\",\r\n    \"sure_100_section_100.1-100.1.xml\": \"S100M - Part 1\",\r\n    \"sure_101_section_101.1-101.1.xml\": \"S101M - Part 1\",\r\n    \"sure_102_section_102.1-102.1.xml\": \"S102M - Part 1\",\r\n    \"sure_103_section_103.1-103.1.xml\": \"S103CatM - Part 1\",\r\n    \"sure_104_section_104.1-104.1.xml\": \"S104CatM - Part 1\",\r\n    \"sure_105_section_105.1-105.1.xml\": \"S105CatM - Part 1\",\r\n    \"sure_106_section_106.1-106.1.xml\": \"S106CatM - Part 1\",\r\n    \"sure_107_section_107.1-107.1.xml\": \"S107M - Part 1\",\r\n    \"sure_108_section_108.1-108.1.xml\": \"S108NM - Part 1\",\r\n    \"sure_109_section_109.1-109.1.xml\": \"S109CatM - Part 1\",\r\n    \"sure_110_section_110.1-110.1.xml\": \"S110M - Part 1\",\r\n    \"sure_111_section_111.1-111.1.xml\": \"S111CatM - Part 1\",\r\n    \"sure_112_section_112.1-112.1.xml\": \"S112CatM - Part 1\",\r\n    \"sure_113_section_113.1-113.1.xml\": \"S113CatM - Part 1\",\r\n    \"sure_114_section_114.1-114.1.xml\": \"S114M - Part 1\"\r\n};\r\n\r\n  useEffect(() => {\r\n    fetchFolders();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (files.length > 0) {\r\n  //     setSelectedFile(files[fileIndex]);\r\n  //   }\r\n  // }, [files, fileIndex]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFolder) {\r\n      fetchFiles(selectedFolder);\r\n      // Reset fileIndex to 0 when selectedFolder changes\r\n      setFileIndex(0);\r\n    }\r\n  }, [selectedFolder]);\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log(\"selectedFolder:\", selectedFolder);\r\n    console.log(\"selectedFile:\", selectedFile);\r\n  \r\n    // Check if both selectedFolder and selectedFile are not empty strings\r\n    if (selectedFolder && selectedFile && selectedFile !== \"Select Tafseer\") {\r\n      // Check if the selectedFile exists in the files array for the selectedFolder\r\n      if (files.includes(selectedFile)) {\r\n        fetchXmlData(selectedFolder, selectedFile);\r\n      } else {\r\n        // Handle the case where the selected file doesn't exist in the selected folder\r\n        console.error(`Selected file \"${selectedFile}\" does not exist in the folder \"${selectedFolder}\".`);\r\n        // You can set xmlData to null or handle the error in a different way\r\n        setXmlData(null);\r\n      }\r\n    }\r\n  }, [selectedFolder, selectedFile, files]);\r\n  \r\n\r\n  const fetchFolders = async () => {\r\n    try {\r\n      const response = await fetch('/files.json');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch folder data');\r\n      }\r\n      const folderData = await response.json();\r\n      const folderNames = Object.keys(folderData);\r\n      setFolders(folderNames);\r\n    } catch (error) {\r\n      console.error('Error fetching folders:', error);\r\n    }\r\n  };\r\n\r\n  const fetchFiles = async (folder) => {\r\n    try {\r\n      const response = await fetch('/files.json');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch file data');\r\n      }\r\n      const folderData = await response.json();\r\n      const fileNames = folderData[folder];\r\n      setFiles(fileNames);\r\n      setFileIndex(0);\r\n    } catch (error) {\r\n      console.error('Error fetching files:', error);\r\n    }\r\n  };\r\n\r\n  const fetchXmlData = async (folder, file) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`/XMLFiles/${folder}/${file}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch XML data');\r\n      }\r\n      const xmlText = await response.text();\r\n\r\n      // Set XML data\r\n      setXmlData(xmlText);\r\n\r\n      // Set loading to false\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching XML:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (files.length > 0) {\r\n      const storedFileIndex = parseInt(localStorage.getItem('selectedFileIndex'), 10) || 0;\r\n      if (storedFileIndex < files.length) {\r\n        setSelectedFile(files[storedFileIndex]);\r\n        setFileIndex(storedFileIndex);\r\n      }\r\n    }\r\n  }, [files]);\r\n  \r\n  const handleNextFile = () => {\r\n    const currentIndex = files.indexOf(selectedFile);\r\n    if (currentIndex < files.length - 1) {\r\n      const nextFile = files[currentIndex + 1];\r\n      setSelectedFile(nextFile);\r\n      setFileIndex(currentIndex + 1);\r\n      localStorage.setItem('selectedFile', nextFile);\r\n      localStorage.setItem('selectedFileIndex', currentIndex + 1);\r\n    }\r\n  };\r\n  \r\n  const handlePreviousFile = () => {\r\n    const currentIndex = files.indexOf(selectedFile);\r\n    if (currentIndex > 0) {\r\n      const prevFile = files[currentIndex - 1];\r\n      setSelectedFile(prevFile);\r\n      setFileIndex(currentIndex - 1);\r\n      localStorage.setItem('selectedFile', prevFile);\r\n      localStorage.setItem('selectedFileIndex', currentIndex - 1);\r\n    }\r\n  };\r\n  \r\n  const toggleEnlargedView = (event) => {\r\n    if (event.target.classList.contains('enlarge-button')) {\r\n      setEnlargedView(!enlargedView);\r\n    }\r\n  };\r\n\r\n  const renderClickableNames = () => {\r\n    if (!xmlData) return null;\r\n  \r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\r\n  \r\n    const removeDiacritics = (text) => {\r\n      // Remove diacritics using a regular expression\r\n      return text.replace(/[\\u064B-\\u065F]/g, '');\r\n    };\r\n  \r\n    const handleNameClick = (name) => {\r\n      const simplifiedName = removeDiacritics(name);\r\n      console.log('handleNameClick triggered with simplified name:', simplifiedName);\r\n      navigate('/people-page', { state: { Refer: simplifiedName } });\r\n    };\r\n  \r\n    const traverseNodes = (nodes) => {\r\n      return Array.from(nodes).map((node, index) => {\r\n        if (node.nodeType === 3) {\r\n          // Text node\r\n          return node.textContent;\r\n        } else if (node.nodeType === 1) {\r\n          // Element node\r\n          const tagName = node.tagName.toLowerCase();\r\n          const name = node.textContent;\r\n          const role = node.getAttribute('role') || node.getAttribute('ana');\r\n    \r\n          if (tagName === 'name' || tagName === 'persname') {\r\n            return (\r\n              <span\r\n                key={index}\r\n                onClick={() => handleNameClick(name)}\r\n                className={`clickable-name ${role ? role.replace(/\\s+/g, '') : ''} ${tagName === 'persname' ? 'persName' : ''} clickable-name-with-background`}\r\n                title={role}\r\n              >\r\n                {name}\r\n              </span>\r\n            );\r\n          } else if (tagName === 'p') {\r\n            // Insert paragraph break element\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <p>{traverseNodes(node.childNodes)}</p>\r\n                {/* Adjust this line to add spacing as needed */}\r\n              </React.Fragment>\r\n            );\r\n          }\r\n          else if (tagName === 'head') {\r\n            // Insert paragraph break element\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <head>{traverseNodes(node.childNodes)}</head>\r\n                {/* Adjust this line to add spacing as needed */}\r\n              </React.Fragment>\r\n            );\r\n          } else {\r\n            // Recursively traverse child nodes\r\n            return traverseNodes(node.childNodes);\r\n          }\r\n        }\r\n        return null; // Ignore other types of nodes\r\n      });\r\n    };\r\n    \r\n  \r\n    const clickableNames = traverseNodes(xmlDoc.childNodes);\r\n  \r\n    return (\r\n      <div className={enlargedView ? 'full-xml-container' : 'details-T p'} onClick={toggleEnlargedView}>\r\n        <div className={enlargedView ? 'full-xml' : ''}>\r\n          {clickableNames}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n  \r\n  const handleScroll = () => {\r\n    if (window.pageYOffset > -10) {\r\n      setShowButton(true);\r\n    } else {\r\n      setShowButton(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('selectedFolder', selectedFolder);\r\n    localStorage.setItem('selectedFile', selectedFile);\r\n  }, [selectedFolder, selectedFile]);\r\n\r\n  return (\r\n  <div>\r\n    <div className=\"back-button-T\" onClick={() => window.history.back()}>\r\n      <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n    </div>\r\n    <div className=\"folder\">\r\n      <label htmlFor=\"folder\">Select a Surah:</label>\r\n      <select id=\"folder\" value={selectedFolder} onChange={(e) => setSelectedFolder(e.target.value)} className=\"select-option-folder\">\r\n        <option value=\"\">Select a Surah</option>\r\n        {folders.map((folder) => (\r\n          <option key={folder} value={folder}>\r\n            {folder}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n    <div className=\"file\">\r\n      <label htmlFor=\"file\">Select Tafseer:</label>\r\n      <select id=\"file\" value={selectedFile} onChange={(e) => setSelectedFile(e.target.value)} className=\"select-option-file\">\r\n        <option value=\"\">Select Tafseer</option>\r\n        {files.map((file) => (\r\n          <option key={file} value={file}>\r\n            {fileMapping[file] || file}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"previous-button\" onClick={handlePreviousFile} disabled={fileIndex === 0}>\r\n        Previous\r\n      </button>\r\n      <button className=\"next-button\" onClick={handleNextFile} disabled={fileIndex === files.length - 1}>\r\n        Next\r\n      </button>\r\n    </div>\r\n    {/* Enlarge/Shrink Button */}\r\n    {xmlData && (\r\n      <button className={`enlarge-button ${enlargedView ? 'shrink' : ''}`} onClick={toggleEnlargedView}>\r\n        {enlargedView ? 'Shrink' : 'Enlarge'}\r\n      </button>\r\n    )}\r\n    {loading ? (\r\n      <Spinner />\r\n    ) : (\r\n      <>\r\n        {xmlData ? (\r\n          renderClickableNames()\r\n        ) : (\r\n        <p style={{ marginLeft: \"42%\" }}>\r\n          {selectedFolder && selectedFolder !== \"Select Surah\"\r\n            ? selectedFile && selectedFile !== \"Select Tafseer\"\r\n              ? \"Please Select Tafseer\"\r\n              : \"Please Select Surah and Tafseer\"\r\n            : \"Please Select Surah and Tafseer\"}\r\n        </p>\r\n        )}\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n};\r\n\r\nexport default XMLRenderer;\r\n\r\n","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Graph\\Graph.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\FAQ\\FAQ.js",["199"],[],"//FAQ.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './FAQ.css';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst FAQ = () => {\r\n  const questionsSet1 = [\r\n    { question: 'Which Quranic Verse Mentions \"ابن عباس\"', query: 'competency_question1' },\r\n    { question: 'How many times has سفيان narrated hadith', query: 'competency_question2' },\r\n    { question: 'No of Hadiths in each Theme\"', query: 'competency_question3' },\r\n  ];\r\n\r\n  const questionsSet2 = [\r\n    { question: 'List Hadith Numbers narrated by \"ابن عباس\"', query: 'competency_question4' },\r\n    { question: 'List names of most heard from narrators with count', query: 'competency_question5' },\r\n    { question: 'Theme of Hadith 189', query: 'competency_question6' },\r\n  ];\r\n\r\n  const questionsSet3 = [\r\n    { question: 'What is the name of Surah 12', query: 'competency_question7' },\r\n    { question: 'Who narrated a hadith and from whom', query: 'competency_question8' },\r\n    { question: 'What is the text of Verse 3 in Surah 12?', query: 'competency_question9' },\r\n  ];\r\n\r\n  const questionsSet4 = [\r\n    { question: 'What are all the names mentioned with their count in all Hadith?', query: 'competency_question10' },\r\n    { question: 'What hadith follows what hadith?', query: 'competency_question11' },\r\n    { question: '# Finding all verses which have used the word مِنْ', query: 'competency_question12' },\r\n  ];\r\n\r\n  const [result, setResult] = useState(null);\r\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\r\n\r\n\r\n  const handleQuestionClick = async (question, query) => {\r\n    const url = `http://127.0.0.1:8000/api/${query}/`;\r\n\r\n    try {\r\n      console.log('Fetching data from:', url);\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const resultData = await response.json();\r\n        console.log('Result data:', resultData);\r\n\r\n        if (\r\n          resultData &&\r\n          resultData.result &&\r\n          resultData.result.results &&\r\n          Array.isArray(resultData.result.results.bindings)\r\n        ) {\r\n          const resultArray = resultData.result.results.bindings;\r\n          setResult(resultArray);\r\n\r\n          // Set selectedQuestion based on the query\r\n          setSelectedQuestion(query);\r\n        } else {\r\n          setResult([]);\r\n          setSelectedQuestion(null);\r\n          console.error('Unexpected data structure in resultData:', resultData);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const renderQuestionTable = () => {\r\n    switch (selectedQuestion) {\r\n      case 'competency_question1':\r\n        return renderQuestion1Table();\r\n      case 'competency_question2':\r\n        return renderQuestion2Table();\r\n      // Add cases for other questions if needed\r\n      case 'competency_question3':\r\n        return renderQuestion3Table();\r\n      case 'competency_question4':\r\n        return renderQuestion4Table();\r\n      case 'competency_question5':\r\n        return renderQuestion5Table();\r\n      case 'competency_question6':\r\n        return renderQuestion6Table();\r\n      case 'competency_question7':\r\n        return renderQuestion7Table();\r\n      case 'competency_question8':\r\n        return renderQuestion8Table();\r\n      case 'competency_question9':\r\n        return renderQuestion9Table();  \r\n      case 'competency_question10':\r\n        return renderQuestion10Table();      \r\n      case 'competency_question11':\r\n        return renderQuestion11Table();     \r\n      case 'competency_question12':\r\n        return renderQuestion12Table();   \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n\r\n  \r\n  const tableRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (tableRef.current) {\r\n      tableRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }\r\n  }, [result]);\r\n\r\n  // Function to render the table for Question 1 of questionsSet1\r\n  const renderQuestion1Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 1:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Reference</th>\r\n                <th>Text</th>\r\n                <th>Chapter</th>\r\n                <th>Verse Number</th>\r\n                <th>Surah Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.reference ? item.reference.value : '-'}</td>\r\n                  <td>{item.Text ? item.Text.value : '-'}</td>\r\n                  <td>{item.chapter ? item.chapter.value : '-'}</td>\r\n                  <td>{item.Verseno ? item.Verseno.value : '-'}</td>\r\n                  <td>{item.Surahname ? item.Surahname.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n  \r\n\r\n  const renderQuestion2Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 2:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Narrator Name</th>\r\n                <th>Total Hadith Heard Count</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.narrator_name ? item.narrator_name.value : '-'}</td>\r\n                  <td>{item.heard_count ? item.heard_count.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n  \r\n  const renderQuestion3Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 3:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Theme Name</th>\r\n                <th>Total Hadith Count</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.Theme_Name ? item.Theme_Name.value : '-'}</td>\r\n                  <td>{item.Hadis_count ? item.Hadis_count.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion4Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 4:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Number</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.name ? item.name.value : '-'}</td>\r\n                  <td>{item.no ? item.no.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion5Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 5:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Narrator Name</th>\r\n                <th>Total Hadith Heard Count</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.narrator_name ? item.narrator_name.value : '-'}</td>\r\n                  <td>{item.heard_count ? item.heard_count.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion6Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 6:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Hadith No</th>\r\n                <th>Theme</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{getHadithNo(item.HadithNo.value)}</td>\r\n                  <td>{getTheme(item.Theme.value)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n  \r\n  // Function to extract the Hadith No from the URI\r\n  const getHadithNo = (uri) => {\r\n    return uri.substring(uri.lastIndexOf('#') + 1);\r\n  };\r\n  \r\n  // Function to extract the Theme from the URI\r\n  const getTheme = (uri) => {\r\n    return uri.substring(uri.lastIndexOf('#') + 1);\r\n  };\r\n  \r\n\r\n  const renderQuestion7Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 7:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Surah Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.Name ? item.Name.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion8Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 8:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Narrator Name</th>\r\n                <th>Heard From</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.name1 ? item.name1.value : '-'}</td>\r\n                  <td>{item.name2 ? item.name2.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion9Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 9:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Text</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.Text ? item.Text.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion10Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 10:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Person Name</th>\r\n                <th>Number of times mentioned</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.person_name ? item.person_name.value : '-'}</td>\r\n                  <td>{item.mention_count ? item.mention_count.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion11Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 11:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>Hadith No</th>\r\n                <th>Follows</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.hadith_no ? item.hadith_no.value : '-'}</td>\r\n                  <td>{getHadithNo(item.follows.value)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderQuestion12Table = () => {\r\n    return (\r\n      result && (\r\n        <div className=\"result-container\">\r\n          <h3>Result for competency Question 12:</h3>\r\n          <table ref={tableRef}>\r\n            <thead>\r\n              <tr>\r\n                <th>No</th>\r\n                <th>Name</th>\r\n                <th>Text</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.no ? item.no.value : '-'}</td>\r\n                  <td>{item.name ? item.name.value : '-'}</td>\r\n                  <td>{item.Text ? item.Text.value : '-'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n  const renderQuestion13Table = () => {\r\n    // return (\r\n    //   // Render table for competency_question2\r\n    // );\r\n  };\r\n\r\n  // ... renderQuestion3Table, renderQuestion4Table, etc. ...\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div className={`FAQ-page`}>\r\n        <div className=\"marquee-container\">\r\n          <div className=\"marquee-text\">\r\n            Al-Tabari Knowledge Queries -- Explore pre-built queries of Tafseer Al-Tabari\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"back-button-FAQ\" onClick={() => window.history.back()}>\r\n          <img src={require('../../assets/back_button.png')} alt=\"Back Button\" />\r\n        </div>\r\n\r\n        <div className=\"details-FAQ\">\r\n          {/* Container for the first set of questions */}\r\n          <div className=\"FAQ-container-with-stroke\">\r\n            {questionsSet1.map((question, index) => (\r\n              <div key={index} className=\"FAQ-block\" id={`FAQ-block-${index}`}>\r\n                {question.question}\r\n                <img\r\n                  src={require('../../assets/FAQ-button.png')}\r\n                  alt=\"Run Button\"\r\n                  className=\"answer-button\"\r\n                  onClick={() => handleQuestionClick(question.question, question.query)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Container for the second set of questions */}\r\n          <div className=\"FAQ-container-with-stroke\">\r\n            {questionsSet2.map((question, index) => (\r\n              <div key={index} className=\"FAQ-block\" id={`FAQ-block-${index + questionsSet1.length}`}>\r\n                {question.question}\r\n                <img\r\n                  src={require('../../assets/FAQ-button.png')}\r\n                  alt=\"Run Button\"\r\n                  className=\"answer-button\"\r\n                  onClick={() => handleQuestionClick(question.question, question.query)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Container for the third set of questions */}\r\n          <div className=\"FAQ-container-with-stroke\">\r\n            {questionsSet3.map((question, index) => (\r\n              <div key={index} className=\"FAQ-block\" id={`FAQ-block-${index + questionsSet2.length}`}>\r\n                {question.question}\r\n                <img\r\n                  src={require('../../assets/FAQ-button.png')}\r\n                  alt=\"Run Button\"\r\n                  className=\"answer-button\"\r\n                  onClick={() => handleQuestionClick(question.question, question.query)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Container for the fourth set of questions */}\r\n          <div className=\"FAQ-container-with-stroke\">\r\n            {questionsSet4.map((question, index) => (\r\n              <div key={index} className=\"FAQ-block\" id={`FAQ-block-${index + questionsSet3.length}`}>\r\n                {question.question}\r\n                <img\r\n                  src={require('../../assets/FAQ-button.png')}\r\n                  alt=\"Run Button\"\r\n                  className=\"answer-button\"\r\n                  onClick={() => handleQuestionClick(question.question, question.query)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {renderQuestionTable()}\r\n\r\n      \r\n      <div className='Footer-portion'>\r\n        <Footer />\r\n      </div>  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FAQ;","D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\MainContent\\AboutDialog.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Footer\\Footer.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\InfoBox\\InfoBox.js",[],[],"D:\\newGitHub\\FYP-2023-2024\\Frontend\\src\\components\\Spinner\\Spinner.js",[],[],{"ruleId":"200","severity":1,"message":"201","line":3,"column":17,"nodeType":"202","messageId":"203","endLine":3,"endColumn":25},{"ruleId":"204","severity":1,"message":"205","line":49,"column":11,"nodeType":"206","endLine":49,"endColumn":111},{"ruleId":"200","severity":1,"message":"207","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":14},{"ruleId":"200","severity":1,"message":"208","line":18,"column":10,"nodeType":"202","messageId":"203","endLine":18,"endColumn":21},{"ruleId":"200","severity":1,"message":"209","line":19,"column":10,"nodeType":"202","messageId":"203","endLine":19,"endColumn":23},{"ruleId":"200","severity":1,"message":"210","line":37,"column":9,"nodeType":"202","messageId":"203","endLine":37,"endColumn":21},{"ruleId":"200","severity":1,"message":"211","line":255,"column":9,"nodeType":"202","messageId":"203","endLine":255,"endColumn":25},{"ruleId":"200","severity":1,"message":"207","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":14},{"ruleId":"200","severity":1,"message":"212","line":25,"column":9,"nodeType":"202","messageId":"203","endLine":25,"endColumn":19},{"ruleId":"200","severity":1,"message":"211","line":179,"column":9,"nodeType":"202","messageId":"203","endLine":179,"endColumn":25},{"ruleId":"200","severity":1,"message":"207","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":14},{"ruleId":"200","severity":1,"message":"211","line":173,"column":9,"nodeType":"202","messageId":"203","endLine":173,"endColumn":25},{"ruleId":"200","severity":1,"message":"213","line":48,"column":9,"nodeType":"202","messageId":"203","endLine":48,"endColumn":32},{"ruleId":"200","severity":1,"message":"214","line":58,"column":11,"nodeType":"202","messageId":"203","endLine":58,"endColumn":24},{"ruleId":"215","severity":1,"message":"216","line":95,"column":6,"nodeType":"217","endLine":95,"endColumn":40,"suggestions":"218"},{"ruleId":"215","severity":1,"message":"219","line":114,"column":6,"nodeType":"217","endLine":114,"endColumn":18,"suggestions":"220"},{"ruleId":"200","severity":1,"message":"212","line":17,"column":9,"nodeType":"202","messageId":"203","endLine":17,"endColumn":19},{"ruleId":"200","severity":1,"message":"207","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":14},{"ruleId":"221","severity":1,"message":"222","line":349,"column":11,"nodeType":"206","endLine":356,"endColumn":12},{"ruleId":"221","severity":1,"message":"222","line":365,"column":11,"nodeType":"206","endLine":372,"endColumn":12},{"ruleId":"200","severity":1,"message":"223","line":16,"column":10,"nodeType":"202","messageId":"203","endLine":16,"endColumn":20},{"ruleId":"200","severity":1,"message":"224","line":445,"column":9,"nodeType":"202","messageId":"203","endLine":445,"endColumn":30},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Footer' is defined but never used.","'visibleRows' is assigned a value but never used.","'narratorNames' is assigned a value but never used.","'toggleExpand' is assigned a value but never used.","'handleJumpToPage' is assigned a value but never used.","'handleSort' is assigned a value but never used.","'handleHadithThemeChange' is assigned a value but never used.","'containerRect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'parseDisplayText'. Either include it or remove the dependency array.","ArrayExpression",["225"],"React Hook useEffect has a missing dependency: 'calculateLinePositions'. Either include it or remove the dependency array.",["226"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'showButton' is assigned a value but never used.","'renderQuestion13Table' is assigned a value but never used.",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [parseDisplayText, resultsData, uniqueNarratorNames]",{"range":"231","text":"232"},"Update the dependencies array to be: [calculateLinePositions, isExpanded]",{"range":"233","text":"234"},[2845,2879],"[parseDisplayText, resultsData, uniqueNarratorNames]",[3434,3446],"[calculateLinePositions, isExpanded]"]